//----------------------
// <auto-generated>
//     Generated using the CRB.TPM.OpenAPIGenerator v1.0.0.0 
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace CRB.TPM.Mod.MainData
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class CommonClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public CommonClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 主数据组织架构层级枚举下拉列表
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> OrgEnumTypeSelectAsync()
        {
            return OrgEnumTypeSelectAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 主数据组织架构层级枚举下拉列表
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> OrgEnumTypeSelectAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/Common/OrgEnumTypeSelect");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MAdvertiserAccountAddressClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MAdvertiserAccountAddressClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, System.Guid? advertiserId, string aDDRNO, System.Guid? advertiserAccountId, string aSSIGNSTAU, string uUID, string sTDATE, string eNDATE, string cODE, string mAINCD, string bUCODE, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, advertiserId, aDDRNO, advertiserAccountId, aSSIGNSTAU, uUID, sTDATE, eNDATE, cODE, mAINCD, bUCODE, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, System.Guid? advertiserId, string aDDRNO, System.Guid? advertiserAccountId, string aSSIGNSTAU, string uUID, string sTDATE, string eNDATE, string cODE, string mAINCD, string bUCODE, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserAccountAddress/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (advertiserId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("AdvertiserId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(advertiserId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (aDDRNO != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ADDRNO") + "=").Append(System.Uri.EscapeDataString(ConvertToString(aDDRNO, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (advertiserAccountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("AdvertiserAccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(advertiserAccountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (aSSIGNSTAU != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ASSIGNSTAU") + "=").Append(System.Uri.EscapeDataString(ConvertToString(aSSIGNSTAU, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (uUID != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("UUID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(uUID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sTDATE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("STDATE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sTDATE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (eNDATE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ENDATE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(eNDATE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cODE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CODE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cODE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mAINCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MAINCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mAINCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bUCODE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("BUCODE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bUCODE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MAdvertiserAccountAddressAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MAdvertiserAccountAddressAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserAccountAddress/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserAccountAddress/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserAccountAddress/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MAdvertiserAccountAddressUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MAdvertiserAccountAddressUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserAccountAddress/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MAdvertiserAccountClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MAdvertiserAccountClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, System.Guid? advertiserId, string bankAccount, string bankActNm, string bankNm, string customerNm, string currencyCD, string dateStart, string dateEnd, int? status, string accountTYP, string isMainFLG, string bankInfoNUM, string rBKNUM, string isValid, string areaCode, string commercialBankDocumentNUM, string modelCode, string mainCode, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, advertiserId, bankAccount, bankActNm, bankNm, customerNm, currencyCD, dateStart, dateEnd, status, accountTYP, isMainFLG, bankInfoNUM, rBKNUM, isValid, areaCode, commercialBankDocumentNUM, modelCode, mainCode, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, System.Guid? advertiserId, string bankAccount, string bankActNm, string bankNm, string customerNm, string currencyCD, string dateStart, string dateEnd, int? status, string accountTYP, string isMainFLG, string bankInfoNUM, string rBKNUM, string isValid, string areaCode, string commercialBankDocumentNUM, string modelCode, string mainCode, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserAccount/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (advertiserId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("AdvertiserId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(advertiserId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankAccount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("BankAccount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankAccount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankActNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("BankActNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankActNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("BankNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CustomerNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (currencyCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CurrencyCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(currencyCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dateStart != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DateStart") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dateStart, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dateEnd != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DateEnd") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dateEnd, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (accountTYP != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("AccountTYP") + "=").Append(System.Uri.EscapeDataString(ConvertToString(accountTYP, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isMainFLG != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsMainFLG") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isMainFLG, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bankInfoNUM != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("BankInfoNUM") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bankInfoNUM, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rBKNUM != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("RBKNUM") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rBKNUM, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isValid != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsValid") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isValid, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (areaCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("AreaCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(areaCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (commercialBankDocumentNUM != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CommercialBankDocumentNUM") + "=").Append(System.Uri.EscapeDataString(ConvertToString(commercialBankDocumentNUM, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modelCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ModelCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(modelCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mainCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MainCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mainCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MAdvertiserAccountAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MAdvertiserAccountAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserAccount/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserAccount/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserAccount/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MAdvertiserAccountUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MAdvertiserAccountUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserAccount/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MAdvertiserAddressClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MAdvertiserAddressClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, System.Guid? advertiserId, string aDDRNO, string aDDRDESC, string zDESC, string mAINPLACE, string oRGID, string oRGCODE, string oRGNAME, string lOCSTATU, string iNVDATE, string fKTJ, string cOA, string eXPACOUNT, string aDVPACOUNT, string fUACOUNT, string cODE, string mAINCD, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, advertiserId, aDDRNO, aDDRDESC, zDESC, mAINPLACE, oRGID, oRGCODE, oRGNAME, lOCSTATU, iNVDATE, fKTJ, cOA, eXPACOUNT, aDVPACOUNT, fUACOUNT, cODE, mAINCD, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, System.Guid? advertiserId, string aDDRNO, string aDDRDESC, string zDESC, string mAINPLACE, string oRGID, string oRGCODE, string oRGNAME, string lOCSTATU, string iNVDATE, string fKTJ, string cOA, string eXPACOUNT, string aDVPACOUNT, string fUACOUNT, string cODE, string mAINCD, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserAddress/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (advertiserId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("AdvertiserId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(advertiserId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (aDDRNO != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ADDRNO") + "=").Append(System.Uri.EscapeDataString(ConvertToString(aDDRNO, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (aDDRDESC != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ADDRDESC") + "=").Append(System.Uri.EscapeDataString(ConvertToString(aDDRDESC, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zDESC != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZDESC") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zDESC, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mAINPLACE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MAINPLACE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mAINPLACE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (oRGID != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ORGID") + "=").Append(System.Uri.EscapeDataString(ConvertToString(oRGID, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (oRGCODE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ORGCODE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(oRGCODE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (oRGNAME != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ORGNAME") + "=").Append(System.Uri.EscapeDataString(ConvertToString(oRGNAME, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lOCSTATU != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LOCSTATU") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lOCSTATU, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (iNVDATE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("INVDATE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(iNVDATE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fKTJ != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FKTJ") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fKTJ, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cOA != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("COA") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cOA, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (eXPACOUNT != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EXPACOUNT") + "=").Append(System.Uri.EscapeDataString(ConvertToString(eXPACOUNT, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (aDVPACOUNT != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ADVPACOUNT") + "=").Append(System.Uri.EscapeDataString(ConvertToString(aDVPACOUNT, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fUACOUNT != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FUACOUNT") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fUACOUNT, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cODE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CODE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cODE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (mAINCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MAINCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(mAINCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MAdvertiserAddressAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MAdvertiserAddressAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserAddress/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserAddress/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserAddress/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MAdvertiserAddressUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MAdvertiserAddressUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserAddress/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MAdvertiserClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MAdvertiserClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string advertiserCode, string advertiserName, string regionCD, int? status, string aDJC, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, advertiserCode, advertiserName, regionCD, status, aDJC, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string advertiserCode, string advertiserName, string regionCD, int? status, string aDJC, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiser/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (advertiserCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("AdvertiserCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(advertiserCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (advertiserName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("AdvertiserName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(advertiserName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (regionCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("RegionCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(regionCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (aDJC != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ADJC") + "=").Append(System.Uri.EscapeDataString(ConvertToString(aDJC, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MAdvertiserAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MAdvertiserAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiser/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiser/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiser/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MAdvertiserUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MAdvertiserUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiser/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MAdvertiserOrgClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MAdvertiserOrgClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string marketOrg, string bigAreaOrg, string officeOrg, string stationOrg, System.Guid? advertiserId, int? status, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, marketOrg, bigAreaOrg, officeOrg, stationOrg, advertiserId, status, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string marketOrg, string bigAreaOrg, string officeOrg, string stationOrg, System.Guid? advertiserId, int? status, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserOrg/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (marketOrg != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MarketOrg") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketOrg, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bigAreaOrg != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("BigAreaOrg") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bigAreaOrg, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (officeOrg != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OfficeOrg") + "=").Append(System.Uri.EscapeDataString(ConvertToString(officeOrg, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stationOrg != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StationOrg") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stationOrg, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (advertiserId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("AdvertiserId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(advertiserId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MAdvertiserOrgAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MAdvertiserOrgAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserOrg/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserOrg/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserOrg/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MAdvertiserOrgUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MAdvertiserOrgUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MAdvertiserOrg/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdCityDistrictClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MdCityDistrictClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string cityCD, string cityNm, string districtCD, string districtNm, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, cityCD, cityNm, districtCD, districtNm, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string cityCD, string cityNm, string districtCD, string districtNm, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdCityDistrict/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cityCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CityCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cityCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cityNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CityNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cityNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (districtCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistrictCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(districtCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (districtNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistrictNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(districtNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MdCityDistrictAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MdCityDistrictAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdCityDistrict/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdCityDistrict/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdCityDistrict/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdCityDistrictUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdCityDistrictUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdCityDistrict/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdCountryProvinceClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MdCountryProvinceClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string countryCD, string countryNm, string provinceCD, string provinceNm, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, countryCD, countryNm, provinceCD, provinceNm, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string countryCD, string countryNm, string provinceCD, string provinceNm, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdCountryProvince/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (countryCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CountryCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(countryCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (countryNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CountryNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(countryNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (provinceCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProvinceCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(provinceCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (provinceNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProvinceNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(provinceNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MdCountryProvinceAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MdCountryProvinceAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdCountryProvince/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdCountryProvince/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdCountryProvince/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdCountryProvinceUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdCountryProvinceUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdCountryProvince/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdDistrictStreetClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MdDistrictStreetClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string districtCD, string districtNm, string streetCD, string streetNm, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, districtCD, districtNm, streetCD, streetNm, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string districtCD, string districtNm, string streetCD, string streetNm, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdDistrictStreet/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (districtCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistrictCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(districtCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (districtNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistrictNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(districtNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (streetCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StreetCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(streetCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (streetNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StreetNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(streetNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MdDistrictStreetAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MdDistrictStreetAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdDistrictStreet/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdDistrictStreet/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdDistrictStreet/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdDistrictStreetUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdDistrictStreetUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdDistrictStreet/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdHeightConfClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MdHeightConfClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string saleOrg, string height, string text, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, saleOrg, height, text, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string saleOrg, string height, string text, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdHeightConf/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (saleOrg != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SaleOrg") + "=").Append(System.Uri.EscapeDataString(ConvertToString(saleOrg, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (height != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Height") + "=").Append(System.Uri.EscapeDataString(ConvertToString(height, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (text != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Text") + "=").Append(System.Uri.EscapeDataString(ConvertToString(text, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MdHeightConfAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MdHeightConfAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdHeightConf/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdHeightConf/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdHeightConf/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdHeightConfUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdHeightConfUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdHeightConf/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MDistributorClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MDistributorClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="name">客户编码/名称</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(string name, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MEntityExportDto> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(name, exportModel_ShowTitle, exportModel_Title, exportModel_FileName, exportModel_Format, exportModel_Mode, exportModel_ShowCopyright, exportModel_Copyright, exportModel_ShowColumnName, exportModel_ShowExportDate, exportModel_ShowExportPeople, exportModel_Columns, exportModel_Entities, exportCount, exportCountLimit, isOutOfExportCountLimit, isExport, queryCount, distributorId, distributorType, headOfficeIds, divisionIds, marketingIds, dutyregionIds, departmentIds, stationIds, distributorIds, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="name">客户编码/名称</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(string name, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MEntityExportDto> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MDistributor/Query?");
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowTitle != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowTitle") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowTitle, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_FileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.FileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_FileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Mode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowCopyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowCopyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowCopyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Copyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Copyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Copyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowColumnName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowColumnName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowColumnName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportPeople != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportPeople") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportPeople, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Columns != null)
            {
                foreach (var item_ in exportModel_Columns) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Columns") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportModel_Entities != null)
            {
                foreach (var item_ in exportModel_Entities) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Entities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isOutOfExportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsOutOfExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isOutOfExportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isExport != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsExport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isExport, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (queryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(queryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (headOfficeIds != null)
            {
                foreach (var item_ in headOfficeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("HeadOfficeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (divisionIds != null)
            {
                foreach (var item_ in divisionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DivisionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (marketingIds != null)
            {
                foreach (var item_ in marketingIds) { urlBuilder_.Append(System.Uri.EscapeDataString("MarketingIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dutyregionIds != null)
            {
                foreach (var item_ in dutyregionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DutyregionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (departmentIds != null)
            {
                foreach (var item_ in departmentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DepartmentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stationIds != null)
            {
                foreach (var item_ in stationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("StationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (distributorIds != null)
            {
                foreach (var item_ in distributorIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DistributorIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="name">客户编码/名称</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> ExportAsync(string name, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MEntityExportDto> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return ExportAsync(name, exportModel_ShowTitle, exportModel_Title, exportModel_FileName, exportModel_Format, exportModel_Mode, exportModel_ShowCopyright, exportModel_Copyright, exportModel_ShowColumnName, exportModel_ShowExportDate, exportModel_ShowExportPeople, exportModel_Columns, exportModel_Entities, exportCount, exportCountLimit, isOutOfExportCountLimit, isExport, queryCount, distributorId, distributorType, headOfficeIds, divisionIds, marketingIds, dutyregionIds, departmentIds, stationIds, distributorIds, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="name">客户编码/名称</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> ExportAsync(string name, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MEntityExportDto> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MDistributor/Export?");
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowTitle != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowTitle") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowTitle, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_FileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.FileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_FileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Mode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowCopyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowCopyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowCopyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Copyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Copyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Copyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowColumnName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowColumnName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowColumnName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportPeople != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportPeople") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportPeople, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Columns != null)
            {
                foreach (var item_ in exportModel_Columns) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Columns") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportModel_Entities != null)
            {
                foreach (var item_ in exportModel_Entities) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Entities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isOutOfExportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsOutOfExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isOutOfExportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isExport != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsExport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isExport, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (queryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(queryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (headOfficeIds != null)
            {
                foreach (var item_ in headOfficeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("HeadOfficeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (divisionIds != null)
            {
                foreach (var item_ in divisionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DivisionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (marketingIds != null)
            {
                foreach (var item_ in marketingIds) { urlBuilder_.Append(System.Uri.EscapeDataString("MarketingIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dutyregionIds != null)
            {
                foreach (var item_ in dutyregionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DutyregionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (departmentIds != null)
            {
                foreach (var item_ in departmentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DepartmentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stationIds != null)
            {
                foreach (var item_ in stationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("StationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (distributorIds != null)
            {
                foreach (var item_ in distributorIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DistributorIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/octet-stream");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MDistributorAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MDistributorAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MDistributor/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MDistributor/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids)
        {
            return DeleteSelectedAsync(ids, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MDistributor/DeleteSelected?");
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MDistributor/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MDistributorUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MDistributorUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MDistributor/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 客户Select下拉接口
        /// </summary>
        /// <param name="ids">如果传了ids那么返回这些ids的信息就行 忽略分页</param>
        /// <param name="type">1经销商 2分销商</param>
        /// <param name="name">筛选</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> SelectAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, int? type, string name, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return SelectAsync(ids, type, name, distributorId, distributorType, headOfficeIds, divisionIds, marketingIds, dutyregionIds, departmentIds, stationIds, distributorIds, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 客户Select下拉接口
        /// </summary>
        /// <param name="ids">如果传了ids那么返回这些ids的信息就行 忽略分页</param>
        /// <param name="type">1经销商 2分销商</param>
        /// <param name="name">筛选</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> SelectAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, int? type, string name, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MDistributor/Select?");
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("Ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (headOfficeIds != null)
            {
                foreach (var item_ in headOfficeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("HeadOfficeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (divisionIds != null)
            {
                foreach (var item_ in divisionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DivisionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (marketingIds != null)
            {
                foreach (var item_ in marketingIds) { urlBuilder_.Append(System.Uri.EscapeDataString("MarketingIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dutyregionIds != null)
            {
                foreach (var item_ in dutyregionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DutyregionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (departmentIds != null)
            {
                foreach (var item_ in departmentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DepartmentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stationIds != null)
            {
                foreach (var item_ in stationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("StationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (distributorIds != null)
            {
                foreach (var item_ in distributorIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DistributorIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MDistributorRelationClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MDistributorRelationClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="distributorId2">分销商编码</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? distributorId2, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MDistributorRelationEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(distributorId2, exportModel_ShowTitle, exportModel_Title, exportModel_FileName, exportModel_Format, exportModel_Mode, exportModel_ShowCopyright, exportModel_Copyright, exportModel_ShowColumnName, exportModel_ShowExportDate, exportModel_ShowExportPeople, exportModel_Columns, exportModel_Entities, exportCount, exportCountLimit, isOutOfExportCountLimit, isExport, queryCount, distributorId, distributorType, headOfficeIds, divisionIds, marketingIds, dutyregionIds, departmentIds, stationIds, distributorIds, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="distributorId2">分销商编码</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? distributorId2, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MDistributorRelationEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MDistributorRelation/Query?");
            if (distributorId2 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorId2") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorId2, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowTitle != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowTitle") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowTitle, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_FileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.FileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_FileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Mode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowCopyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowCopyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowCopyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Copyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Copyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Copyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowColumnName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowColumnName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowColumnName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportPeople != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportPeople") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportPeople, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Columns != null)
            {
                foreach (var item_ in exportModel_Columns) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Columns") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportModel_Entities != null)
            {
                foreach (var item_ in exportModel_Entities) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Entities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isOutOfExportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsOutOfExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isOutOfExportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isExport != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsExport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isExport, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (queryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(queryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (headOfficeIds != null)
            {
                foreach (var item_ in headOfficeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("HeadOfficeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (divisionIds != null)
            {
                foreach (var item_ in divisionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DivisionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (marketingIds != null)
            {
                foreach (var item_ in marketingIds) { urlBuilder_.Append(System.Uri.EscapeDataString("MarketingIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dutyregionIds != null)
            {
                foreach (var item_ in dutyregionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DutyregionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (departmentIds != null)
            {
                foreach (var item_ in departmentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DepartmentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stationIds != null)
            {
                foreach (var item_ in stationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("StationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (distributorIds != null)
            {
                foreach (var item_ in distributorIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DistributorIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="distributorId2">分销商编码</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> ExportAsync(System.Guid? distributorId2, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MDistributorRelationEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return ExportAsync(distributorId2, exportModel_ShowTitle, exportModel_Title, exportModel_FileName, exportModel_Format, exportModel_Mode, exportModel_ShowCopyright, exportModel_Copyright, exportModel_ShowColumnName, exportModel_ShowExportDate, exportModel_ShowExportPeople, exportModel_Columns, exportModel_Entities, exportCount, exportCountLimit, isOutOfExportCountLimit, isExport, queryCount, distributorId, distributorType, headOfficeIds, divisionIds, marketingIds, dutyregionIds, departmentIds, stationIds, distributorIds, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="distributorId2">分销商编码</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> ExportAsync(System.Guid? distributorId2, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MDistributorRelationEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MDistributorRelation/Export?");
            if (distributorId2 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorId2") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorId2, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowTitle != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowTitle") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowTitle, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_FileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.FileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_FileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Mode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowCopyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowCopyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowCopyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Copyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Copyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Copyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowColumnName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowColumnName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowColumnName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportPeople != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportPeople") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportPeople, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Columns != null)
            {
                foreach (var item_ in exportModel_Columns) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Columns") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportModel_Entities != null)
            {
                foreach (var item_ in exportModel_Entities) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Entities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isOutOfExportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsOutOfExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isOutOfExportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isExport != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsExport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isExport, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (queryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(queryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (headOfficeIds != null)
            {
                foreach (var item_ in headOfficeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("HeadOfficeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (divisionIds != null)
            {
                foreach (var item_ in divisionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DivisionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (marketingIds != null)
            {
                foreach (var item_ in marketingIds) { urlBuilder_.Append(System.Uri.EscapeDataString("MarketingIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dutyregionIds != null)
            {
                foreach (var item_ in dutyregionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DutyregionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (departmentIds != null)
            {
                foreach (var item_ in departmentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DepartmentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stationIds != null)
            {
                foreach (var item_ in stationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("StationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (distributorIds != null)
            {
                foreach (var item_ in distributorIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DistributorIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/octet-stream");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MDistributorRelationAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MDistributorRelationAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MDistributorRelation/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MDistributorRelation/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids)
        {
            return DeleteSelectedAsync(ids, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MDistributorRelation/DeleteSelected?");
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MDistributorRelation/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MDistributorRelationUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MDistributorRelationUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MDistributorRelation/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdKaBigSysNameConfClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MdKaBigSysNameConfClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string saleOrg, string kASystemNum, string saleOrgNm, string kASystemName, string kALx, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, saleOrg, kASystemNum, saleOrgNm, kASystemName, kALx, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string saleOrg, string kASystemNum, string saleOrgNm, string kASystemName, string kALx, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdKaBigSysNameConf/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (saleOrg != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SaleOrg") + "=").Append(System.Uri.EscapeDataString(ConvertToString(saleOrg, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (kASystemNum != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("KASystemNum") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kASystemNum, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (saleOrgNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SaleOrgNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(saleOrgNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (kASystemName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("KASystemName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kASystemName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (kALx != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("KALx") + "=").Append(System.Uri.EscapeDataString(ConvertToString(kALx, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MdKaBigSysNameConfAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MdKaBigSysNameConfAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdKaBigSysNameConf/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdKaBigSysNameConf/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdKaBigSysNameConf/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdKaBigSysNameConfUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdKaBigSysNameConfUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdKaBigSysNameConf/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdProvinceCityClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MdProvinceCityClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string provinceCD, string provinceNm, string cityCD, string cityNm, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, provinceCD, provinceNm, cityCD, cityNm, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string provinceCD, string provinceNm, string cityCD, string cityNm, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdProvinceCity/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (provinceCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProvinceCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(provinceCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (provinceNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProvinceNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(provinceNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cityCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CityCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cityCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (cityNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CityNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(cityNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MdProvinceCityAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MdProvinceCityAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdProvinceCity/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdProvinceCity/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdProvinceCity/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdProvinceCityUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdProvinceCityUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdProvinceCity/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdReTmnBTyteConfigClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MdReTmnBTyteConfigClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="tmnStoreType1">终端编码</param>
        /// <param name="zbnType">关系类型(ZS003:终端负责员工/ZS001:经销商业务员)</param>
        /// <param name="zbnTypeTxt">创建人</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string tmnStoreType1, string zbnType, string zbnTypeTxt, int? status, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, tmnStoreType1, zbnType, zbnTypeTxt, status, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="tmnStoreType1">终端编码</param>
        /// <param name="zbnType">关系类型(ZS003:终端负责员工/ZS001:经销商业务员)</param>
        /// <param name="zbnTypeTxt">创建人</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string tmnStoreType1, string zbnType, string zbnTypeTxt, int? status, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdReTmnBTyteConfig/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tmnStoreType1 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TmnStoreType1") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tmnStoreType1, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zbnType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZbnType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zbnType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zbnTypeTxt != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZbnTypeTxt") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zbnTypeTxt, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MdReTmnBTyteConfigAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MdReTmnBTyteConfigAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdReTmnBTyteConfig/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdReTmnBTyteConfig/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdReTmnBTyteConfig/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdReTmnBTyteConfigUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdReTmnBTyteConfigUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdReTmnBTyteConfig/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdSaleLineClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MdSaleLineClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string lineCD, string lineNm, int? status, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, lineCD, lineNm, status, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string lineCD, string lineNm, int? status, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdSaleLine/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LineCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LineNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MdSaleLineAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MdSaleLineAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdSaleLine/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdSaleLine/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdSaleLine/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdSaleLineUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdSaleLineUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdSaleLine/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdStreetVillageClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MdStreetVillageClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string streetCD, string streetNm, string villageCD, string villageNm, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, streetCD, streetNm, villageCD, villageNm, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string streetCD, string streetNm, string villageCD, string villageNm, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdStreetVillage/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (streetCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StreetCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(streetCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (streetNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StreetNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(streetNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (villageCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("VillageCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(villageCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (villageNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("VillageNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(villageNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MdStreetVillageAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MdStreetVillageAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdStreetVillage/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdStreetVillage/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdStreetVillage/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdStreetVillageUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdStreetVillageUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdStreetVillage/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdTmnTypeClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MdTmnTypeClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string regionCD, string lineCD, string lineNm, string level1TypeCD, string level1TypeNm, string level2TypeCD, string level2TypeNm, string level3TypeCD, string level3TypeNm, int? status, string marketOrgCD, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, regionCD, lineCD, lineNm, level1TypeCD, level1TypeNm, level2TypeCD, level2TypeNm, level3TypeCD, level3TypeNm, status, marketOrgCD, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string regionCD, string lineCD, string lineNm, string level1TypeCD, string level1TypeNm, string level2TypeCD, string level2TypeNm, string level3TypeCD, string level3TypeNm, int? status, string marketOrgCD, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdTmnType/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (regionCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("RegionCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(regionCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LineCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (lineNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LineNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lineNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (level1TypeCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Level1TypeCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(level1TypeCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (level1TypeNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Level1TypeNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(level1TypeNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (level2TypeCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Level2TypeCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(level2TypeCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (level2TypeNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Level2TypeNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(level2TypeNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (level3TypeCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Level3TypeCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(level3TypeCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (level3TypeNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Level3TypeNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(level3TypeNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (status != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (marketOrgCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MarketOrgCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketOrgCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MdTmnTypeAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MdTmnTypeAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdTmnType/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdTmnType/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdTmnType/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdTmnTypeUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MdTmnTypeUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MdTmnType/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MEntityClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MEntityClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="name">同时支持法人编码/法人名称查询</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(string name, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MEntityExportDto> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(name, exportModel_ShowTitle, exportModel_Title, exportModel_FileName, exportModel_Format, exportModel_Mode, exportModel_ShowCopyright, exportModel_Copyright, exportModel_ShowColumnName, exportModel_ShowExportDate, exportModel_ShowExportPeople, exportModel_Columns, exportModel_Entities, exportCount, exportCountLimit, isOutOfExportCountLimit, isExport, queryCount, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="name">同时支持法人编码/法人名称查询</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(string name, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MEntityExportDto> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MEntity/Query?");
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowTitle != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowTitle") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowTitle, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_FileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.FileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_FileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Mode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowCopyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowCopyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowCopyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Copyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Copyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Copyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowColumnName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowColumnName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowColumnName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportPeople != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportPeople") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportPeople, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Columns != null)
            {
                foreach (var item_ in exportModel_Columns) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Columns") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportModel_Entities != null)
            {
                foreach (var item_ in exportModel_Entities) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Entities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isOutOfExportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsOutOfExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isOutOfExportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isExport != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsExport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isExport, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (queryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(queryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="name">同时支持法人编码/法人名称查询</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> ExportAsync(string name, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MEntityExportDto> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return ExportAsync(name, exportModel_ShowTitle, exportModel_Title, exportModel_FileName, exportModel_Format, exportModel_Mode, exportModel_ShowCopyright, exportModel_Copyright, exportModel_ShowColumnName, exportModel_ShowExportDate, exportModel_ShowExportPeople, exportModel_Columns, exportModel_Entities, exportCount, exportCountLimit, isOutOfExportCountLimit, isExport, queryCount, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="name">同时支持法人编码/法人名称查询</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> ExportAsync(string name, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MEntityExportDto> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MEntity/Export?");
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowTitle != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowTitle") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowTitle, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_FileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.FileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_FileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Mode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowCopyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowCopyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowCopyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Copyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Copyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Copyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowColumnName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowColumnName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowColumnName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportPeople != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportPeople") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportPeople, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Columns != null)
            {
                foreach (var item_ in exportModel_Columns) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Columns") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportModel_Entities != null)
            {
                foreach (var item_ in exportModel_Entities) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Entities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isOutOfExportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsOutOfExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isOutOfExportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isExport != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsExport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isExport, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (queryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(queryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/octet-stream");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MEntityAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MEntityAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MEntity/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MEntity/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids)
        {
            return DeleteSelectedAsync(ids, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MEntity/DeleteSelected?");
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MEntity/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MEntityUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MEntityUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MEntity/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MMarketingProductClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MMarketingProductClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="marketingId">营销中心id</param>
        /// <param name="productId">产品id</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? marketingId, System.Guid? productId, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(marketingId, productId, distributorId, distributorType, headOfficeIds, divisionIds, marketingIds, dutyregionIds, departmentIds, stationIds, distributorIds, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="marketingId">营销中心id</param>
        /// <param name="productId">产品id</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? marketingId, System.Guid? productId, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MMarketingProduct/Query?");
            if (marketingId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MarketingId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketingId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (productId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProductId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (headOfficeIds != null)
            {
                foreach (var item_ in headOfficeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("HeadOfficeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (divisionIds != null)
            {
                foreach (var item_ in divisionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DivisionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (marketingIds != null)
            {
                foreach (var item_ in marketingIds) { urlBuilder_.Append(System.Uri.EscapeDataString("MarketingIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dutyregionIds != null)
            {
                foreach (var item_ in dutyregionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DutyregionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (departmentIds != null)
            {
                foreach (var item_ in departmentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DepartmentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stationIds != null)
            {
                foreach (var item_ in stationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("StationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (distributorIds != null)
            {
                foreach (var item_ in distributorIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DistributorIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="marketingId">营销中心id</param>
        /// <param name="productId">产品id</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> ExportAsync(bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MMarketingProductEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, System.Guid? marketingId, System.Guid? productId, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return ExportAsync(exportModel_ShowTitle, exportModel_Title, exportModel_FileName, exportModel_Format, exportModel_Mode, exportModel_ShowCopyright, exportModel_Copyright, exportModel_ShowColumnName, exportModel_ShowExportDate, exportModel_ShowExportPeople, exportModel_Columns, exportModel_Entities, exportCount, exportCountLimit, isOutOfExportCountLimit, isExport, queryCount, marketingId, productId, distributorId, distributorType, headOfficeIds, divisionIds, marketingIds, dutyregionIds, departmentIds, stationIds, distributorIds, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="marketingId">营销中心id</param>
        /// <param name="productId">产品id</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> ExportAsync(bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MMarketingProductEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, System.Guid? marketingId, System.Guid? productId, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MMarketingProduct/Export?");
            if (exportModel_ShowTitle != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowTitle") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowTitle, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_FileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.FileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_FileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Mode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowCopyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowCopyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowCopyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Copyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Copyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Copyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowColumnName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowColumnName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowColumnName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportPeople != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportPeople") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportPeople, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Columns != null)
            {
                foreach (var item_ in exportModel_Columns) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Columns") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportModel_Entities != null)
            {
                foreach (var item_ in exportModel_Entities) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Entities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isOutOfExportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsOutOfExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isOutOfExportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isExport != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsExport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isExport, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (queryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(queryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (marketingId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MarketingId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketingId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (productId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProductId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (headOfficeIds != null)
            {
                foreach (var item_ in headOfficeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("HeadOfficeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (divisionIds != null)
            {
                foreach (var item_ in divisionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DivisionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (marketingIds != null)
            {
                foreach (var item_ in marketingIds) { urlBuilder_.Append(System.Uri.EscapeDataString("MarketingIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dutyregionIds != null)
            {
                foreach (var item_ in dutyregionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DutyregionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (departmentIds != null)
            {
                foreach (var item_ in departmentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DepartmentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stationIds != null)
            {
                foreach (var item_ in stationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("StationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (distributorIds != null)
            {
                foreach (var item_ in distributorIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DistributorIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/octet-stream");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MMarketingProductAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MMarketingProductAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MMarketingProduct/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MMarketingProduct/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids)
        {
            return DeleteSelectedAsync(ids, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MMarketingProduct/DeleteSelected?");
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MMarketingProduct/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MMarketingProductUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MMarketingProductUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MMarketingProduct/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MMarketingSetupClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MMarketingSetupClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="name">筛选编码/名字</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(string name, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(name, distributorId, distributorType, headOfficeIds, divisionIds, marketingIds, dutyregionIds, departmentIds, stationIds, distributorIds, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="name">筛选编码/名字</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(string name, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MMarketingSetup/Query?");
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (headOfficeIds != null)
            {
                foreach (var item_ in headOfficeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("HeadOfficeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (divisionIds != null)
            {
                foreach (var item_ in divisionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DivisionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (marketingIds != null)
            {
                foreach (var item_ in marketingIds) { urlBuilder_.Append(System.Uri.EscapeDataString("MarketingIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dutyregionIds != null)
            {
                foreach (var item_ in dutyregionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DutyregionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (departmentIds != null)
            {
                foreach (var item_ in departmentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DepartmentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stationIds != null)
            {
                foreach (var item_ in stationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("StationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (distributorIds != null)
            {
                foreach (var item_ in distributorIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DistributorIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="name">营销中心编码/名称</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> ExportAsync(string name, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MMarketingSetupEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return ExportAsync(name, exportModel_ShowTitle, exportModel_Title, exportModel_FileName, exportModel_Format, exportModel_Mode, exportModel_ShowCopyright, exportModel_Copyright, exportModel_ShowColumnName, exportModel_ShowExportDate, exportModel_ShowExportPeople, exportModel_Columns, exportModel_Entities, exportCount, exportCountLimit, isOutOfExportCountLimit, isExport, queryCount, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="name">营销中心编码/名称</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> ExportAsync(string name, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MMarketingSetupEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MMarketingSetup/Export?");
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowTitle != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowTitle") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowTitle, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_FileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.FileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_FileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Mode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowCopyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowCopyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowCopyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Copyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Copyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Copyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowColumnName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowColumnName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowColumnName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportPeople != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportPeople") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportPeople, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Columns != null)
            {
                foreach (var item_ in exportModel_Columns) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Columns") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportModel_Entities != null)
            {
                foreach (var item_ in exportModel_Entities) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Entities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isOutOfExportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsOutOfExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isOutOfExportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isExport != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsExport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isExport, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (queryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(queryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/octet-stream");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MMarketingSetupAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MMarketingSetupAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MMarketingSetup/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MMarketingSetup/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids)
        {
            return DeleteSelectedAsync(ids, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MMarketingSetup/DeleteSelected?");
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MMarketingSetup/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MMarketingSetupUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MMarketingSetupUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MMarketingSetup/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MObjectClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MObjectClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="id">营销中心id、大区id、业务部id、工作站id、客户id</param>
        /// <param name="type">层级（1-雪花总部、2-事业部、3-营销中心、4-大区、5-业务部、6-工作站、7-客户）</param>
        /// <param name="objectCode">对象编码</param>
        /// <param name="objectName">对象名称</param>
        /// <param name="marketingId">营销中心id</param>
        /// <param name="marketingCode">营销中心编码</param>
        /// <param name="marketingName">营销中心名称</param>
        /// <param name="bigAreaId">大区id</param>
        /// <param name="bigAreaCode">大区编码</param>
        /// <param name="bigAreaName">大区名称</param>
        /// <param name="officeId">业务部id</param>
        /// <param name="officeCode">业务部编码</param>
        /// <param name="officeName">业务部名称</param>
        /// <param name="stationId">工作站id</param>
        /// <param name="stationCode">工作站编码</param>
        /// <param name="stationName">工作站名称</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorCode">客户编码</param>
        /// <param name="distributorName">客户名称</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, int? type, string objectCode, string objectName, System.Guid? marketingId, string marketingCode, string marketingName, System.Guid? bigAreaId, string bigAreaCode, string bigAreaName, System.Guid? officeId, string officeCode, string officeName, System.Guid? stationId, string stationCode, string stationName, System.Guid? distributorId, string distributorCode, string distributorName, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, type, objectCode, objectName, marketingId, marketingCode, marketingName, bigAreaId, bigAreaCode, bigAreaName, officeId, officeCode, officeName, stationId, stationCode, stationName, distributorId, distributorCode, distributorName, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="id">营销中心id、大区id、业务部id、工作站id、客户id</param>
        /// <param name="type">层级（1-雪花总部、2-事业部、3-营销中心、4-大区、5-业务部、6-工作站、7-客户）</param>
        /// <param name="objectCode">对象编码</param>
        /// <param name="objectName">对象名称</param>
        /// <param name="marketingId">营销中心id</param>
        /// <param name="marketingCode">营销中心编码</param>
        /// <param name="marketingName">营销中心名称</param>
        /// <param name="bigAreaId">大区id</param>
        /// <param name="bigAreaCode">大区编码</param>
        /// <param name="bigAreaName">大区名称</param>
        /// <param name="officeId">业务部id</param>
        /// <param name="officeCode">业务部编码</param>
        /// <param name="officeName">业务部名称</param>
        /// <param name="stationId">工作站id</param>
        /// <param name="stationCode">工作站编码</param>
        /// <param name="stationName">工作站名称</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorCode">客户编码</param>
        /// <param name="distributorName">客户名称</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, int? type, string objectCode, string objectName, System.Guid? marketingId, string marketingCode, string marketingName, System.Guid? bigAreaId, string bigAreaCode, string bigAreaName, System.Guid? officeId, string officeCode, string officeName, System.Guid? stationId, string stationCode, string stationName, System.Guid? distributorId, string distributorCode, string distributorName, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MObject/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (objectCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ObjectCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(objectCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (objectName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ObjectName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(objectName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (marketingId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MarketingId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketingId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (marketingCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MarketingCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketingCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (marketingName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MarketingName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketingName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bigAreaId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("BigAreaId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bigAreaId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bigAreaCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("BigAreaCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bigAreaCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bigAreaName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("BigAreaName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bigAreaName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (officeId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OfficeId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(officeId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (officeCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OfficeCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(officeCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (officeName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OfficeName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(officeName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stationId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StationId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stationId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stationCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StationCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stationCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (stationName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StationName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(stationName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MObjectAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MObjectAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MObject/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MObject/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MObject/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MObjectUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MObjectUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MObject/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MOrgClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MOrgClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="orgCode">组织编码</param>
        /// <param name="orgName">名称</param>
        /// <param name="type">层级（1-雪花总部、2-事业部、3-营销中心、4-大区、5-业务部、6-工作站）</param>
        /// <param name="parentId">父级id</param>
        /// <param name="invalidMapping">作废映射，多个用“|”分隔</param>
        /// <param name="remark">备注</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string orgCode, string orgName, int? type, System.Guid? parentId, string invalidMapping, string remark, string deleted, System.Guid? deletedBy, string deleter, System.DateTimeOffset? deletedTime, System.Guid? createdBy, string creator, System.DateTimeOffset? createdTime, System.Guid? modifiedBy, string modifier, System.DateTimeOffset? modifiedTime, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, orgCode, orgName, type, parentId, invalidMapping, remark, deleted, deletedBy, deleter, deletedTime, createdBy, creator, createdTime, modifiedBy, modifier, modifiedTime, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="orgCode">组织编码</param>
        /// <param name="orgName">名称</param>
        /// <param name="type">层级（1-雪花总部、2-事业部、3-营销中心、4-大区、5-业务部、6-工作站）</param>
        /// <param name="parentId">父级id</param>
        /// <param name="invalidMapping">作废映射，多个用“|”分隔</param>
        /// <param name="remark">备注</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string orgCode, string orgName, int? type, System.Guid? parentId, string invalidMapping, string remark, string deleted, System.Guid? deletedBy, string deleter, System.DateTimeOffset? deletedTime, System.Guid? createdBy, string creator, System.DateTimeOffset? createdTime, System.Guid? modifiedBy, string modifier, System.DateTimeOffset? modifiedTime, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MOrg/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orgCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OrgCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orgCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (orgName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("OrgName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(orgName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (type != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (parentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ParentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(parentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (invalidMapping != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("InvalidMapping") + "=").Append(System.Uri.EscapeDataString(ConvertToString(invalidMapping, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (remark != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Remark") + "=").Append(System.Uri.EscapeDataString(ConvertToString(remark, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Deleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deletedBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DeletedBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deletedBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deleter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Deleter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deleter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deletedTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DeletedTime") + "=").Append(System.Uri.EscapeDataString(deletedTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CreatedBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(createdBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creator != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Creator") + "=").Append(System.Uri.EscapeDataString(ConvertToString(creator, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CreatedTime") + "=").Append(System.Uri.EscapeDataString(createdTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ModifiedBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(modifiedBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifier != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Modifier") + "=").Append(System.Uri.EscapeDataString(ConvertToString(modifier, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ModifiedTime") + "=").Append(System.Uri.EscapeDataString(modifiedTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MOrgAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MOrgAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MOrg/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MOrg/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids)
        {
            return DeleteSelectedAsync(ids, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MOrg/DeleteSelected?");
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MOrg/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MOrgUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MOrgUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MOrg/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 组织树结构列表
        /// </summary>
        /// <param name="level">哪一层级的数据</param>
        /// <param name="level1Ids">雪花id</param>
        /// <param name="level2Ids">事业部id</param>
        /// <param name="level3Ids">营销中心id</param>
        /// <param name="level4Ids">大区id</param>
        /// <param name="level5Ids">业务部id</param>
        /// <param name="level6Ids">工作站id</param>
        /// <param name="ids">传了ids那么直接按照ids筛选出来返回全部列表 不要分页</param>
        /// <param name="name">关键词</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> SelectAsync(int? level, System.Collections.Generic.IEnumerable<System.Guid> level1Ids, System.Collections.Generic.IEnumerable<System.Guid> level2Ids, System.Collections.Generic.IEnumerable<System.Guid> level3Ids, System.Collections.Generic.IEnumerable<System.Guid> level4Ids, System.Collections.Generic.IEnumerable<System.Guid> level5Ids, System.Collections.Generic.IEnumerable<System.Guid> level6Ids, System.Collections.Generic.IEnumerable<System.Guid> ids, string name, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return SelectAsync(level, level1Ids, level2Ids, level3Ids, level4Ids, level5Ids, level6Ids, ids, name, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 组织树结构列表
        /// </summary>
        /// <param name="level">哪一层级的数据</param>
        /// <param name="level1Ids">雪花id</param>
        /// <param name="level2Ids">事业部id</param>
        /// <param name="level3Ids">营销中心id</param>
        /// <param name="level4Ids">大区id</param>
        /// <param name="level5Ids">业务部id</param>
        /// <param name="level6Ids">工作站id</param>
        /// <param name="ids">传了ids那么直接按照ids筛选出来返回全部列表 不要分页</param>
        /// <param name="name">关键词</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> SelectAsync(int? level, System.Collections.Generic.IEnumerable<System.Guid> level1Ids, System.Collections.Generic.IEnumerable<System.Guid> level2Ids, System.Collections.Generic.IEnumerable<System.Guid> level3Ids, System.Collections.Generic.IEnumerable<System.Guid> level4Ids, System.Collections.Generic.IEnumerable<System.Guid> level5Ids, System.Collections.Generic.IEnumerable<System.Guid> level6Ids, System.Collections.Generic.IEnumerable<System.Guid> ids, string name, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MOrg/Select?");
            if (level != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Level") + "=").Append(System.Uri.EscapeDataString(ConvertToString(level, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (level1Ids != null)
            {
                foreach (var item_ in level1Ids) { urlBuilder_.Append(System.Uri.EscapeDataString("Level1Ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (level2Ids != null)
            {
                foreach (var item_ in level2Ids) { urlBuilder_.Append(System.Uri.EscapeDataString("Level2Ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (level3Ids != null)
            {
                foreach (var item_ in level3Ids) { urlBuilder_.Append(System.Uri.EscapeDataString("Level3Ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (level4Ids != null)
            {
                foreach (var item_ in level4Ids) { urlBuilder_.Append(System.Uri.EscapeDataString("Level4Ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (level5Ids != null)
            {
                foreach (var item_ in level5Ids) { urlBuilder_.Append(System.Uri.EscapeDataString("Level5Ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (level6Ids != null)
            {
                foreach (var item_ in level6Ids) { urlBuilder_.Append(System.Uri.EscapeDataString("Level6Ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("Ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 获取当前访问用户的角色拥有的组织层级（合并用户角色和组织）
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> CurrentMOrgAsync()
        {
            return CurrentMOrgAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 获取当前访问用户的角色拥有的组织层级（合并用户角色和组织）
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> CurrentMOrgAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MOrg/CurrentMOrg");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 获取指定层级组织数据
        /// </summary>
        /// <param name="level">10:雪花、20:事业部、30:营销中心、40:大区、50:业务部、60:工作站、70:客户</param>
        /// <param name="ignore">是否忽略组织</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> GetOrgLevelAsync(int? level, bool? ignore)
        {
            return GetOrgLevelAsync(level, ignore, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 获取指定层级组织数据
        /// </summary>
        /// <param name="level">10:雪花、20:事业部、30:营销中心、40:大区、50:业务部、60:工作站、70:客户</param>
        /// <param name="ignore">是否忽略组织</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> GetOrgLevelAsync(int? level, bool? ignore, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MOrg/GetOrgLevel?");
            if (level != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("level") + "=").Append(System.Uri.EscapeDataString(ConvertToString(level, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (ignore != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ignore") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ignore, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 获取组织树
        /// </summary>
        /// <param name="level">表示指定获取几个层级的数据,默认获取1层,10:雪花、20:事业部、
        /// <br/>            30:营销中心、40:大区、50:业务部、60:工作站、70:客户</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> TreeAsync(int? level)
        {
            return TreeAsync(level, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 获取组织树
        /// </summary>
        /// <param name="level">表示指定获取几个层级的数据,默认获取1层,10:雪花、20:事业部、
        /// <br/>            30:营销中心、40:大区、50:业务部、60:工作站、70:客户</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> TreeAsync(int? level, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MOrg/Tree?");
            if (level != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("level") + "=").Append(System.Uri.EscapeDataString(ConvertToString(level, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 获取组织树
        /// </summary>
        /// <param name="level">表示指定获取几个层级的数据,默认1层,10:雪花、20:事业部、
        /// <br/>            30:营销中心、40:大区、50:业务部、60:工作站、70:客户</param>
        /// <param name="parentId">组织父级ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> GetTreeByParentIdAsync(int? level, System.Guid? parentId)
        {
            return GetTreeByParentIdAsync(level, parentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 获取组织树
        /// </summary>
        /// <param name="level">表示指定获取几个层级的数据,默认1层,10:雪花、20:事业部、
        /// <br/>            30:营销中心、40:大区、50:业务部、60:工作站、70:客户</param>
        /// <param name="parentId">组织父级ID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> GetTreeByParentIdAsync(int? level, System.Guid? parentId, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MOrg/GetTreeByParentId?");
            if (level != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("level") + "=").Append(System.Uri.EscapeDataString(ConvertToString(level, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (parentId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("parentId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(parentId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MProductClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MProductClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="name">产品编码/名称</param>
        /// <param name="productType">产品类型</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(string name, int? productType, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(name, productType, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="name">产品编码/名称</param>
        /// <param name="productType">产品类型</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(string name, int? productType, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProduct/Query?");
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (productType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProductType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="name">产品编码/名称</param>
        /// <param name="productType">产品类型</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> ExportAsync(bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MProductEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, string name, int? productType, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return ExportAsync(exportModel_ShowTitle, exportModel_Title, exportModel_FileName, exportModel_Format, exportModel_Mode, exportModel_ShowCopyright, exportModel_Copyright, exportModel_ShowColumnName, exportModel_ShowExportDate, exportModel_ShowExportPeople, exportModel_Columns, exportModel_Entities, exportCount, exportCountLimit, isOutOfExportCountLimit, isExport, queryCount, name, productType, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="name">产品编码/名称</param>
        /// <param name="productType">产品类型</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> ExportAsync(bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MProductEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, string name, int? productType, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProduct/Export?");
            if (exportModel_ShowTitle != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowTitle") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowTitle, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_FileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.FileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_FileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Mode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowCopyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowCopyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowCopyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Copyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Copyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Copyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowColumnName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowColumnName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowColumnName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportPeople != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportPeople") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportPeople, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Columns != null)
            {
                foreach (var item_ in exportModel_Columns) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Columns") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportModel_Entities != null)
            {
                foreach (var item_ in exportModel_Entities) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Entities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isOutOfExportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsOutOfExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isOutOfExportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isExport != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsExport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isExport, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (queryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(queryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (productType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProductType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/octet-stream");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MProductAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MProductAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProduct/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProduct/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids)
        {
            return DeleteSelectedAsync(ids, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProduct/DeleteSelected?");
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProduct/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MProductUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MProductUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProduct/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 产品Select下拉接口
        /// </summary>
        /// <param name="ids">已选ids</param>
        /// <param name="name">产品编码/名称</param>
        /// <param name="productType">产品类型</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> SelectAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, string name, int? productType, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return SelectAsync(ids, name, productType, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 产品Select下拉接口
        /// </summary>
        /// <param name="ids">已选ids</param>
        /// <param name="name">产品编码/名称</param>
        /// <param name="productType">产品类型</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> SelectAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, string name, int? productType, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProduct/Select?");
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("Ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (productType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProductType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MProductMarketingPropertyClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MProductMarketingPropertyClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="marketingId">营销中心id（orgid）</param>
        /// <param name="productId">产品id</param>
        /// <param name="brand">品牌</param>
        /// <param name="brandChild">子品牌</param>
        /// <param name="keyProduct">重点产品</param>
        /// <param name="abbreviation">产品简称</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, System.Guid? marketingId, System.Guid? productId, string brand, string brandChild, string keyProduct, string abbreviation, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, marketingId, productId, brand, brandChild, keyProduct, abbreviation, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="marketingId">营销中心id（orgid）</param>
        /// <param name="productId">产品id</param>
        /// <param name="brand">品牌</param>
        /// <param name="brandChild">子品牌</param>
        /// <param name="keyProduct">重点产品</param>
        /// <param name="abbreviation">产品简称</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, System.Guid? marketingId, System.Guid? productId, string brand, string brandChild, string keyProduct, string abbreviation, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProductMarketingProperty/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (marketingId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("MarketingId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketingId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (productId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProductId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (brand != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Brand") + "=").Append(System.Uri.EscapeDataString(ConvertToString(brand, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (brandChild != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("BrandChild") + "=").Append(System.Uri.EscapeDataString(ConvertToString(brandChild, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (keyProduct != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("KeyProduct") + "=").Append(System.Uri.EscapeDataString(ConvertToString(keyProduct, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (abbreviation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Abbreviation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(abbreviation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MProductMarketingPropertyAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MProductMarketingPropertyAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProductMarketingProperty/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProductMarketingProperty/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProductMarketingProperty/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MProductMarketingPropertyUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MProductMarketingPropertyUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProductMarketingProperty/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MProductPropertyClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MProductPropertyClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="productPropertiesType">类型</param>
        /// <param name="name">编码/名称</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(int? productPropertiesType, string name, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(productPropertiesType, name, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="productPropertiesType">类型</param>
        /// <param name="name">编码/名称</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(int? productPropertiesType, string name, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProductProperty/Query?");
            if (productPropertiesType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProductPropertiesType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productPropertiesType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 产品属性列表
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> TypeSelectAsync()
        {
            return TypeSelectAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 产品属性列表
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> TypeSelectAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProductProperty/TypeSelect");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="productPropertiesType">类型</param>
        /// <param name="name">编码/名称</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> ExportAsync(bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MProductPropertyEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, int? productPropertiesType, string name, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return ExportAsync(exportModel_ShowTitle, exportModel_Title, exportModel_FileName, exportModel_Format, exportModel_Mode, exportModel_ShowCopyright, exportModel_Copyright, exportModel_ShowColumnName, exportModel_ShowExportDate, exportModel_ShowExportPeople, exportModel_Columns, exportModel_Entities, exportCount, exportCountLimit, isOutOfExportCountLimit, isExport, queryCount, productPropertiesType, name, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="productPropertiesType">类型</param>
        /// <param name="name">编码/名称</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> ExportAsync(bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MProductPropertyEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, int? productPropertiesType, string name, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProductProperty/Export?");
            if (exportModel_ShowTitle != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowTitle") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowTitle, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_FileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.FileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_FileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Mode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowCopyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowCopyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowCopyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Copyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Copyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Copyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowColumnName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowColumnName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowColumnName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportPeople != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportPeople") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportPeople, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Columns != null)
            {
                foreach (var item_ in exportModel_Columns) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Columns") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportModel_Entities != null)
            {
                foreach (var item_ in exportModel_Entities) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Entities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isOutOfExportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsOutOfExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isOutOfExportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isExport != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsExport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isExport, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (queryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(queryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (productPropertiesType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ProductPropertiesType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(productPropertiesType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/octet-stream");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MProductPropertyAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MProductPropertyAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProductProperty/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProductProperty/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids)
        {
            return DeleteSelectedAsync(ids, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProductProperty/DeleteSelected?");
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProductProperty/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MProductPropertyUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MProductPropertyUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MProductProperty/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MTerminalClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MTerminalClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="name">终端编码/名称</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(string name, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(name, distributorId, distributorType, headOfficeIds, divisionIds, marketingIds, dutyregionIds, departmentIds, stationIds, distributorIds, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="name">终端编码/名称</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(string name, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminal/Query?");
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (headOfficeIds != null)
            {
                foreach (var item_ in headOfficeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("HeadOfficeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (divisionIds != null)
            {
                foreach (var item_ in divisionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DivisionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (marketingIds != null)
            {
                foreach (var item_ in marketingIds) { urlBuilder_.Append(System.Uri.EscapeDataString("MarketingIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dutyregionIds != null)
            {
                foreach (var item_ in dutyregionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DutyregionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (departmentIds != null)
            {
                foreach (var item_ in departmentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DepartmentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stationIds != null)
            {
                foreach (var item_ in stationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("StationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (distributorIds != null)
            {
                foreach (var item_ in distributorIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DistributorIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="name">终端编码/名称</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> ExportAsync(bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MTerminalEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, string name, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return ExportAsync(exportModel_ShowTitle, exportModel_Title, exportModel_FileName, exportModel_Format, exportModel_Mode, exportModel_ShowCopyright, exportModel_Copyright, exportModel_ShowColumnName, exportModel_ShowExportDate, exportModel_ShowExportPeople, exportModel_Columns, exportModel_Entities, exportCount, exportCountLimit, isOutOfExportCountLimit, isExport, queryCount, name, distributorId, distributorType, headOfficeIds, divisionIds, marketingIds, dutyregionIds, departmentIds, stationIds, distributorIds, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="name">终端编码/名称</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> ExportAsync(bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MTerminalEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, string name, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminal/Export?");
            if (exportModel_ShowTitle != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowTitle") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowTitle, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_FileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.FileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_FileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Mode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowCopyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowCopyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowCopyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Copyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Copyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Copyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowColumnName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowColumnName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowColumnName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportPeople != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportPeople") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportPeople, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Columns != null)
            {
                foreach (var item_ in exportModel_Columns) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Columns") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportModel_Entities != null)
            {
                foreach (var item_ in exportModel_Entities) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Entities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isOutOfExportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsOutOfExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isOutOfExportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isExport != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsExport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isExport, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (queryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(queryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (headOfficeIds != null)
            {
                foreach (var item_ in headOfficeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("HeadOfficeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (divisionIds != null)
            {
                foreach (var item_ in divisionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DivisionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (marketingIds != null)
            {
                foreach (var item_ in marketingIds) { urlBuilder_.Append(System.Uri.EscapeDataString("MarketingIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dutyregionIds != null)
            {
                foreach (var item_ in dutyregionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DutyregionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (departmentIds != null)
            {
                foreach (var item_ in departmentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DepartmentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stationIds != null)
            {
                foreach (var item_ in stationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("StationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (distributorIds != null)
            {
                foreach (var item_ in distributorIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DistributorIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/octet-stream");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MTerminalAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MTerminalAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminal/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminal/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids)
        {
            return DeleteSelectedAsync(ids, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminal/DeleteSelected?");
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminal/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MTerminalUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MTerminalUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminal/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 终端Select下拉接口
        /// </summary>
        /// <param name="ids">ids数组，如果传了ids那么返回这些ids的信息就行 忽略分页</param>
        /// <param name="name">筛选</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> SelectAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, string name, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return SelectAsync(ids, name, distributorId, distributorType, headOfficeIds, divisionIds, marketingIds, dutyregionIds, departmentIds, stationIds, distributorIds, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 终端Select下拉接口
        /// </summary>
        /// <param name="ids">ids数组，如果传了ids那么返回这些ids的信息就行 忽略分页</param>
        /// <param name="name">筛选</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> SelectAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, string name, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminal/Select?");
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("Ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (headOfficeIds != null)
            {
                foreach (var item_ in headOfficeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("HeadOfficeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (divisionIds != null)
            {
                foreach (var item_ in divisionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DivisionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (marketingIds != null)
            {
                foreach (var item_ in marketingIds) { urlBuilder_.Append(System.Uri.EscapeDataString("MarketingIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dutyregionIds != null)
            {
                foreach (var item_ in dutyregionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DutyregionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (departmentIds != null)
            {
                foreach (var item_ in departmentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DepartmentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stationIds != null)
            {
                foreach (var item_ in stationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("StationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (distributorIds != null)
            {
                foreach (var item_ in distributorIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DistributorIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MTerminalDetailClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MTerminalDetailClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="id">终端主键相同</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string tel, string prov, string city, string country, string street, string village, string addDetail, string tmnOwner, string tmnPhone, string per1Nm, string per1Post, string per1Bir, string per1Tel, string per2Nm, string per2Post, string per2Bir, string per2Tel, string per3Nm, string per3Post, string per3Bir, string per3Tel, string geo, string coopNature, string sysNum, string sysNm, string saleChannel, string isProtocol, decimal? rL, string xYLY, string zGDFL, string faxNumber, string namCountry, string zZKASystem1, string zZFMS_MUM, string zZTable, string zZSeat, string zZWEIXIN_NUM, string zZAge, string zZInner_Area, string zZOut_Area, string zZBEER, string zZCHAIN_NAME, string zZCHAIN_TEL, string zZCHAIN_TYPE, string zZCHAIN_QUA, string zZCHAIN_NUM, string zZCUISINE, string zZCHARACTERISTIC, string zZPERCONSUME, string zZOPEN_TIME, string zZFREEZER, string zZFLD0000CG, string zZVIRTUAL, decimal? zZVISIT, string zZCHARACTER, string zZSTORAGE, string zZFLD000052, string zZSMALLBOX_NUM, string zZPRO_NUM2, string zZPRO_NAME2, string zZALCO, string zZBEST_TIME, string zZWHET_CHAIN, string zZBIGBOX_NUM, string zZMIDBOX_NUM, string zZPORN_PRICE, string zZPRO_RANK, string zZDAY_REVENUE, string zZCASHIER_NUM, string zZDISTRI_WAY, decimal? zZFLD00005D, string zZRECONCILIATION, string zZACCOUNT_WAY, string zZACCCOUNT_TIME, string zZFIPERSON, string zZFIPERSON_TEL, string e_MAILSMT, string uRIURI, string bZ, string zZDELIVER_NOTE, string zZCARLIMIT_DESC, string zZACCOUNT_PERIOD, string zZKABEER_NUM, string zZKABEER_PILE, string zZKANONBEER_PILE, string zZKAICE_NUM, string zZKACOLD_NUM, string zZKASHELF_NUM, string zZKALEVEL_NUM, string zZKAWHOLEBOX_NUM, string zZKAPACKAGE_NUM, string zZKAPILE_USE, string zZKANONPILE_USE, string zZKAPRO_USE, string zZKASHELF_USE, string zZKAICE_USE, string zZKACOLD_USE, string zZKACASHER_USE, string zZKAMULTI_USE, string zZKADISPLAY_USE, string zZKAPILEOUT_USE, string zZFLD0000G2, string zZKAFLAG_USE, string zZKAPOST_USE, string zZKAAB_USE, string zZFLD0000G6, string zZKALADDER_USE, string zZKASERVICE_USE, string zZKAPOP_USE, string zZKALIVELY_USE, int? zZBOX, string zZDECK_NAME, string zbnType, string zZGSYYZZH, string zZGSZZMC, string deleted, System.Guid? deletedBy, string deleter, System.DateTimeOffset? deletedTime, System.Guid? createdBy, string creator, System.DateTimeOffset? createdTime, System.Guid? modifiedBy, string modifier, System.DateTimeOffset? modifiedTime, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, tel, prov, city, country, street, village, addDetail, tmnOwner, tmnPhone, per1Nm, per1Post, per1Bir, per1Tel, per2Nm, per2Post, per2Bir, per2Tel, per3Nm, per3Post, per3Bir, per3Tel, geo, coopNature, sysNum, sysNm, saleChannel, isProtocol, rL, xYLY, zGDFL, faxNumber, namCountry, zZKASystem1, zZFMS_MUM, zZTable, zZSeat, zZWEIXIN_NUM, zZAge, zZInner_Area, zZOut_Area, zZBEER, zZCHAIN_NAME, zZCHAIN_TEL, zZCHAIN_TYPE, zZCHAIN_QUA, zZCHAIN_NUM, zZCUISINE, zZCHARACTERISTIC, zZPERCONSUME, zZOPEN_TIME, zZFREEZER, zZFLD0000CG, zZVIRTUAL, zZVISIT, zZCHARACTER, zZSTORAGE, zZFLD000052, zZSMALLBOX_NUM, zZPRO_NUM2, zZPRO_NAME2, zZALCO, zZBEST_TIME, zZWHET_CHAIN, zZBIGBOX_NUM, zZMIDBOX_NUM, zZPORN_PRICE, zZPRO_RANK, zZDAY_REVENUE, zZCASHIER_NUM, zZDISTRI_WAY, zZFLD00005D, zZRECONCILIATION, zZACCOUNT_WAY, zZACCCOUNT_TIME, zZFIPERSON, zZFIPERSON_TEL, e_MAILSMT, uRIURI, bZ, zZDELIVER_NOTE, zZCARLIMIT_DESC, zZACCOUNT_PERIOD, zZKABEER_NUM, zZKABEER_PILE, zZKANONBEER_PILE, zZKAICE_NUM, zZKACOLD_NUM, zZKASHELF_NUM, zZKALEVEL_NUM, zZKAWHOLEBOX_NUM, zZKAPACKAGE_NUM, zZKAPILE_USE, zZKANONPILE_USE, zZKAPRO_USE, zZKASHELF_USE, zZKAICE_USE, zZKACOLD_USE, zZKACASHER_USE, zZKAMULTI_USE, zZKADISPLAY_USE, zZKAPILEOUT_USE, zZFLD0000G2, zZKAFLAG_USE, zZKAPOST_USE, zZKAAB_USE, zZFLD0000G6, zZKALADDER_USE, zZKASERVICE_USE, zZKAPOP_USE, zZKALIVELY_USE, zZBOX, zZDECK_NAME, zbnType, zZGSYYZZH, zZGSZZMC, deleted, deletedBy, deleter, deletedTime, createdBy, creator, createdTime, modifiedBy, modifier, modifiedTime, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="id">终端主键相同</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string tel, string prov, string city, string country, string street, string village, string addDetail, string tmnOwner, string tmnPhone, string per1Nm, string per1Post, string per1Bir, string per1Tel, string per2Nm, string per2Post, string per2Bir, string per2Tel, string per3Nm, string per3Post, string per3Bir, string per3Tel, string geo, string coopNature, string sysNum, string sysNm, string saleChannel, string isProtocol, decimal? rL, string xYLY, string zGDFL, string faxNumber, string namCountry, string zZKASystem1, string zZFMS_MUM, string zZTable, string zZSeat, string zZWEIXIN_NUM, string zZAge, string zZInner_Area, string zZOut_Area, string zZBEER, string zZCHAIN_NAME, string zZCHAIN_TEL, string zZCHAIN_TYPE, string zZCHAIN_QUA, string zZCHAIN_NUM, string zZCUISINE, string zZCHARACTERISTIC, string zZPERCONSUME, string zZOPEN_TIME, string zZFREEZER, string zZFLD0000CG, string zZVIRTUAL, decimal? zZVISIT, string zZCHARACTER, string zZSTORAGE, string zZFLD000052, string zZSMALLBOX_NUM, string zZPRO_NUM2, string zZPRO_NAME2, string zZALCO, string zZBEST_TIME, string zZWHET_CHAIN, string zZBIGBOX_NUM, string zZMIDBOX_NUM, string zZPORN_PRICE, string zZPRO_RANK, string zZDAY_REVENUE, string zZCASHIER_NUM, string zZDISTRI_WAY, decimal? zZFLD00005D, string zZRECONCILIATION, string zZACCOUNT_WAY, string zZACCCOUNT_TIME, string zZFIPERSON, string zZFIPERSON_TEL, string e_MAILSMT, string uRIURI, string bZ, string zZDELIVER_NOTE, string zZCARLIMIT_DESC, string zZACCOUNT_PERIOD, string zZKABEER_NUM, string zZKABEER_PILE, string zZKANONBEER_PILE, string zZKAICE_NUM, string zZKACOLD_NUM, string zZKASHELF_NUM, string zZKALEVEL_NUM, string zZKAWHOLEBOX_NUM, string zZKAPACKAGE_NUM, string zZKAPILE_USE, string zZKANONPILE_USE, string zZKAPRO_USE, string zZKASHELF_USE, string zZKAICE_USE, string zZKACOLD_USE, string zZKACASHER_USE, string zZKAMULTI_USE, string zZKADISPLAY_USE, string zZKAPILEOUT_USE, string zZFLD0000G2, string zZKAFLAG_USE, string zZKAPOST_USE, string zZKAAB_USE, string zZFLD0000G6, string zZKALADDER_USE, string zZKASERVICE_USE, string zZKAPOP_USE, string zZKALIVELY_USE, int? zZBOX, string zZDECK_NAME, string zbnType, string zZGSYYZZH, string zZGSZZMC, string deleted, System.Guid? deletedBy, string deleter, System.DateTimeOffset? deletedTime, System.Guid? createdBy, string creator, System.DateTimeOffset? createdTime, System.Guid? modifiedBy, string modifier, System.DateTimeOffset? modifiedTime, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminalDetail/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Tel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (prov != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Prov") + "=").Append(System.Uri.EscapeDataString(ConvertToString(prov, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (city != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("City") + "=").Append(System.Uri.EscapeDataString(ConvertToString(city, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (country != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Country") + "=").Append(System.Uri.EscapeDataString(ConvertToString(country, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (street != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Street") + "=").Append(System.Uri.EscapeDataString(ConvertToString(street, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (village != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Village") + "=").Append(System.Uri.EscapeDataString(ConvertToString(village, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (addDetail != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("AddDetail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(addDetail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tmnOwner != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TmnOwner") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tmnOwner, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (tmnPhone != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TmnPhone") + "=").Append(System.Uri.EscapeDataString(ConvertToString(tmnPhone, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per1Nm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Per1Nm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per1Nm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per1Post != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Per1Post") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per1Post, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per1Bir != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Per1Bir") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per1Bir, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per1Tel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Per1Tel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per1Tel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per2Nm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Per2Nm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per2Nm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per2Post != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Per2Post") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per2Post, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per2Bir != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Per2Bir") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per2Bir, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per2Tel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Per2Tel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per2Tel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per3Nm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Per3Nm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per3Nm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per3Post != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Per3Post") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per3Post, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per3Bir != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Per3Bir") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per3Bir, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (per3Tel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Per3Tel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(per3Tel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (geo != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Geo") + "=").Append(System.Uri.EscapeDataString(ConvertToString(geo, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (coopNature != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CoopNature") + "=").Append(System.Uri.EscapeDataString(ConvertToString(coopNature, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sysNum != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SysNum") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sysNum, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sysNm != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SysNm") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sysNm, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (saleChannel != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("SaleChannel") + "=").Append(System.Uri.EscapeDataString(ConvertToString(saleChannel, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isProtocol != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsProtocol") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isProtocol, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rL != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("RL") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rL, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (xYLY != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("XYLY") + "=").Append(System.Uri.EscapeDataString(ConvertToString(xYLY, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zGDFL != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZGDFL") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zGDFL, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (faxNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("FaxNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(faxNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (namCountry != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("NamCountry") + "=").Append(System.Uri.EscapeDataString(ConvertToString(namCountry, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKASystem1 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKASystem1") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKASystem1, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZFMS_MUM != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZFMS_MUM") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZFMS_MUM, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZTable != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZTable") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZTable, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZSeat != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZSeat") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZSeat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZWEIXIN_NUM != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZWEIXIN_NUM") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZWEIXIN_NUM, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZAge != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZAge") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZAge, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZInner_Area != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZInner_Area") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZInner_Area, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZOut_Area != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZOut_Area") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZOut_Area, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZBEER != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZBEER") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZBEER, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZCHAIN_NAME != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZCHAIN_NAME") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZCHAIN_NAME, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZCHAIN_TEL != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZCHAIN_TEL") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZCHAIN_TEL, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZCHAIN_TYPE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZCHAIN_TYPE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZCHAIN_TYPE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZCHAIN_QUA != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZCHAIN_QUA") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZCHAIN_QUA, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZCHAIN_NUM != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZCHAIN_NUM") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZCHAIN_NUM, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZCUISINE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZCUISINE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZCUISINE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZCHARACTERISTIC != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZCHARACTERISTIC") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZCHARACTERISTIC, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZPERCONSUME != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZPERCONSUME") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZPERCONSUME, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZOPEN_TIME != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZOPEN_TIME") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZOPEN_TIME, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZFREEZER != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZFREEZER") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZFREEZER, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZFLD0000CG != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZFLD0000CG") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZFLD0000CG, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZVIRTUAL != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZVIRTUAL") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZVIRTUAL, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZVISIT != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZVISIT") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZVISIT, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZCHARACTER != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZCHARACTER") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZCHARACTER, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZSTORAGE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZSTORAGE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZSTORAGE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZFLD000052 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZFLD000052") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZFLD000052, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZSMALLBOX_NUM != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZSMALLBOX_NUM") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZSMALLBOX_NUM, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZPRO_NUM2 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZPRO_NUM2") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZPRO_NUM2, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZPRO_NAME2 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZPRO_NAME2") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZPRO_NAME2, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZALCO != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZALCO") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZALCO, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZBEST_TIME != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZBEST_TIME") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZBEST_TIME, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZWHET_CHAIN != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZWHET_CHAIN") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZWHET_CHAIN, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZBIGBOX_NUM != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZBIGBOX_NUM") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZBIGBOX_NUM, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZMIDBOX_NUM != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZMIDBOX_NUM") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZMIDBOX_NUM, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZPORN_PRICE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZPORN_PRICE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZPORN_PRICE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZPRO_RANK != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZPRO_RANK") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZPRO_RANK, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZDAY_REVENUE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZDAY_REVENUE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZDAY_REVENUE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZCASHIER_NUM != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZCASHIER_NUM") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZCASHIER_NUM, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZDISTRI_WAY != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZDISTRI_WAY") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZDISTRI_WAY, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZFLD00005D != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZFLD00005D") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZFLD00005D, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZRECONCILIATION != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZRECONCILIATION") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZRECONCILIATION, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZACCOUNT_WAY != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZACCOUNT_WAY") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZACCOUNT_WAY, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZACCCOUNT_TIME != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZACCCOUNT_TIME") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZACCCOUNT_TIME, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZFIPERSON != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZFIPERSON") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZFIPERSON, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZFIPERSON_TEL != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZFIPERSON_TEL") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZFIPERSON_TEL, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (e_MAILSMT != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("E_MAILSMT") + "=").Append(System.Uri.EscapeDataString(ConvertToString(e_MAILSMT, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (uRIURI != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("URIURI") + "=").Append(System.Uri.EscapeDataString(ConvertToString(uRIURI, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (bZ != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("BZ") + "=").Append(System.Uri.EscapeDataString(ConvertToString(bZ, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZDELIVER_NOTE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZDELIVER_NOTE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZDELIVER_NOTE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZCARLIMIT_DESC != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZCARLIMIT_DESC") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZCARLIMIT_DESC, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZACCOUNT_PERIOD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZACCOUNT_PERIOD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZACCOUNT_PERIOD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKABEER_NUM != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKABEER_NUM") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKABEER_NUM, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKABEER_PILE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKABEER_PILE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKABEER_PILE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKANONBEER_PILE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKANONBEER_PILE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKANONBEER_PILE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKAICE_NUM != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKAICE_NUM") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKAICE_NUM, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKACOLD_NUM != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKACOLD_NUM") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKACOLD_NUM, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKASHELF_NUM != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKASHELF_NUM") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKASHELF_NUM, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKALEVEL_NUM != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKALEVEL_NUM") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKALEVEL_NUM, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKAWHOLEBOX_NUM != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKAWHOLEBOX_NUM") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKAWHOLEBOX_NUM, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKAPACKAGE_NUM != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKAPACKAGE_NUM") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKAPACKAGE_NUM, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKAPILE_USE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKAPILE_USE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKAPILE_USE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKANONPILE_USE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKANONPILE_USE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKANONPILE_USE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKAPRO_USE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKAPRO_USE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKAPRO_USE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKASHELF_USE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKASHELF_USE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKASHELF_USE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKAICE_USE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKAICE_USE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKAICE_USE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKACOLD_USE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKACOLD_USE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKACOLD_USE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKACASHER_USE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKACASHER_USE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKACASHER_USE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKAMULTI_USE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKAMULTI_USE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKAMULTI_USE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKADISPLAY_USE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKADISPLAY_USE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKADISPLAY_USE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKAPILEOUT_USE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKAPILEOUT_USE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKAPILEOUT_USE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZFLD0000G2 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZFLD0000G2") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZFLD0000G2, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKAFLAG_USE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKAFLAG_USE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKAFLAG_USE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKAPOST_USE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKAPOST_USE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKAPOST_USE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKAAB_USE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKAAB_USE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKAAB_USE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZFLD0000G6 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZFLD0000G6") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZFLD0000G6, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKALADDER_USE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKALADDER_USE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKALADDER_USE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKASERVICE_USE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKASERVICE_USE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKASERVICE_USE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKAPOP_USE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKAPOP_USE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKAPOP_USE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZKALIVELY_USE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZKALIVELY_USE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZKALIVELY_USE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZBOX != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZBOX") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZBOX, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZDECK_NAME != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZDECK_NAME") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZDECK_NAME, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zbnType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZbnType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zbnType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZGSYYZZH != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZGSYYZZH") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZGSYYZZH, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zZGSZZMC != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZZGSZZMC") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zZGSZZMC, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deleted != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Deleted") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deleted, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deletedBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DeletedBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deletedBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deleter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Deleter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(deleter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (deletedTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DeletedTime") + "=").Append(System.Uri.EscapeDataString(deletedTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CreatedBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(createdBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (creator != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Creator") + "=").Append(System.Uri.EscapeDataString(ConvertToString(creator, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createdTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CreatedTime") + "=").Append(System.Uri.EscapeDataString(createdTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedBy != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ModifiedBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(modifiedBy, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifier != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Modifier") + "=").Append(System.Uri.EscapeDataString(ConvertToString(modifier, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (modifiedTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ModifiedTime") + "=").Append(System.Uri.EscapeDataString(modifiedTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MTerminalDetailAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MTerminalDetailAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminalDetail/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminalDetail/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminalDetail/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MTerminalDetailUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MTerminalDetailUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminalDetail/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MTerminalDistributorClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MTerminalDistributorClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="terminalId">终端id,使用终端下拉独立组件</param>
        /// <param name="name">编号/名称</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? terminalId, string name, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MTerminalDistributorEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(terminalId, name, exportModel_ShowTitle, exportModel_Title, exportModel_FileName, exportModel_Format, exportModel_Mode, exportModel_ShowCopyright, exportModel_Copyright, exportModel_ShowColumnName, exportModel_ShowExportDate, exportModel_ShowExportPeople, exportModel_Columns, exportModel_Entities, exportCount, exportCountLimit, isOutOfExportCountLimit, isExport, queryCount, distributorId, distributorType, headOfficeIds, divisionIds, marketingIds, dutyregionIds, departmentIds, stationIds, distributorIds, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="terminalId">终端id,使用终端下拉独立组件</param>
        /// <param name="name">编号/名称</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? terminalId, string name, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MTerminalDistributorEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminalDistributor/Query?");
            if (terminalId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TerminalId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(terminalId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowTitle != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowTitle") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowTitle, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_FileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.FileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_FileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Mode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowCopyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowCopyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowCopyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Copyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Copyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Copyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowColumnName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowColumnName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowColumnName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportPeople != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportPeople") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportPeople, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Columns != null)
            {
                foreach (var item_ in exportModel_Columns) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Columns") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportModel_Entities != null)
            {
                foreach (var item_ in exportModel_Entities) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Entities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isOutOfExportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsOutOfExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isOutOfExportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isExport != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsExport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isExport, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (queryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(queryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (headOfficeIds != null)
            {
                foreach (var item_ in headOfficeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("HeadOfficeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (divisionIds != null)
            {
                foreach (var item_ in divisionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DivisionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (marketingIds != null)
            {
                foreach (var item_ in marketingIds) { urlBuilder_.Append(System.Uri.EscapeDataString("MarketingIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dutyregionIds != null)
            {
                foreach (var item_ in dutyregionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DutyregionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (departmentIds != null)
            {
                foreach (var item_ in departmentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DepartmentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stationIds != null)
            {
                foreach (var item_ in stationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("StationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (distributorIds != null)
            {
                foreach (var item_ in distributorIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DistributorIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="terminalId">终端id,使用终端下拉独立组件</param>
        /// <param name="name">编号/名称</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> ExportAsync(System.Guid? terminalId, string name, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MTerminalDistributorEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return ExportAsync(terminalId, name, exportModel_ShowTitle, exportModel_Title, exportModel_FileName, exportModel_Format, exportModel_Mode, exportModel_ShowCopyright, exportModel_Copyright, exportModel_ShowColumnName, exportModel_ShowExportDate, exportModel_ShowExportPeople, exportModel_Columns, exportModel_Entities, exportCount, exportCountLimit, isOutOfExportCountLimit, isExport, queryCount, distributorId, distributorType, headOfficeIds, divisionIds, marketingIds, dutyregionIds, departmentIds, stationIds, distributorIds, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="terminalId">终端id,使用终端下拉独立组件</param>
        /// <param name="name">编号/名称</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> ExportAsync(System.Guid? terminalId, string name, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MTerminalDistributorEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminalDistributor/Export?");
            if (terminalId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TerminalId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(terminalId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowTitle != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowTitle") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowTitle, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_FileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.FileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_FileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Mode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowCopyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowCopyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowCopyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Copyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Copyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Copyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowColumnName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowColumnName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowColumnName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportPeople != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportPeople") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportPeople, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Columns != null)
            {
                foreach (var item_ in exportModel_Columns) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Columns") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportModel_Entities != null)
            {
                foreach (var item_ in exportModel_Entities) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Entities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isOutOfExportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsOutOfExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isOutOfExportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isExport != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsExport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isExport, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (queryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(queryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (headOfficeIds != null)
            {
                foreach (var item_ in headOfficeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("HeadOfficeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (divisionIds != null)
            {
                foreach (var item_ in divisionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DivisionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (marketingIds != null)
            {
                foreach (var item_ in marketingIds) { urlBuilder_.Append(System.Uri.EscapeDataString("MarketingIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dutyregionIds != null)
            {
                foreach (var item_ in dutyregionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DutyregionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (departmentIds != null)
            {
                foreach (var item_ in departmentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DepartmentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stationIds != null)
            {
                foreach (var item_ in stationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("StationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (distributorIds != null)
            {
                foreach (var item_ in distributorIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DistributorIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/octet-stream");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MTerminalDistributorAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MTerminalDistributorAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminalDistributor/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminalDistributor/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids)
        {
            return DeleteSelectedAsync(ids, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminalDistributor/DeleteSelected?");
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminalDistributor/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MTerminalDistributorUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MTerminalDistributorUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminalDistributor/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MTerminalUserClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public MTerminalUserClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="terminalId">终端id</param>
        /// <param name="accountId">业务员id</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? terminalId, System.Guid? accountId, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MTerminalUserEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(terminalId, accountId, exportModel_ShowTitle, exportModel_Title, exportModel_FileName, exportModel_Format, exportModel_Mode, exportModel_ShowCopyright, exportModel_Copyright, exportModel_ShowColumnName, exportModel_ShowExportDate, exportModel_ShowExportPeople, exportModel_Columns, exportModel_Entities, exportCount, exportCountLimit, isOutOfExportCountLimit, isExport, queryCount, distributorId, distributorType, headOfficeIds, divisionIds, marketingIds, dutyregionIds, departmentIds, stationIds, distributorIds, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="terminalId">终端id</param>
        /// <param name="accountId">业务员id</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? terminalId, System.Guid? accountId, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MTerminalUserEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminalUser/Query?");
            if (terminalId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TerminalId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(terminalId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (accountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("AccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowTitle != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowTitle") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowTitle, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_FileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.FileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_FileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Mode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowCopyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowCopyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowCopyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Copyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Copyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Copyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowColumnName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowColumnName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowColumnName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportPeople != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportPeople") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportPeople, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Columns != null)
            {
                foreach (var item_ in exportModel_Columns) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Columns") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportModel_Entities != null)
            {
                foreach (var item_ in exportModel_Entities) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Entities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isOutOfExportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsOutOfExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isOutOfExportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isExport != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsExport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isExport, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (queryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(queryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (headOfficeIds != null)
            {
                foreach (var item_ in headOfficeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("HeadOfficeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (divisionIds != null)
            {
                foreach (var item_ in divisionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DivisionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (marketingIds != null)
            {
                foreach (var item_ in marketingIds) { urlBuilder_.Append(System.Uri.EscapeDataString("MarketingIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dutyregionIds != null)
            {
                foreach (var item_ in dutyregionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DutyregionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (departmentIds != null)
            {
                foreach (var item_ in departmentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DepartmentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stationIds != null)
            {
                foreach (var item_ in stationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("StationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (distributorIds != null)
            {
                foreach (var item_ in distributorIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DistributorIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="terminalId">终端id</param>
        /// <param name="accountId">业务员id</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> ExportAsync(System.Guid? terminalId, System.Guid? accountId, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MTerminalUserEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return ExportAsync(terminalId, accountId, exportModel_ShowTitle, exportModel_Title, exportModel_FileName, exportModel_Format, exportModel_Mode, exportModel_ShowCopyright, exportModel_Copyright, exportModel_ShowColumnName, exportModel_ShowExportDate, exportModel_ShowExportPeople, exportModel_Columns, exportModel_Entities, exportCount, exportCountLimit, isOutOfExportCountLimit, isExport, queryCount, distributorId, distributorType, headOfficeIds, divisionIds, marketingIds, dutyregionIds, departmentIds, stationIds, distributorIds, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 导出
        /// </summary>
        /// <param name="terminalId">终端id</param>
        /// <param name="accountId">业务员id</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="distributorId">客户id</param>
        /// <param name="distributorType">客户类型</param>
        /// <param name="headOfficeIds">雪花ids</param>
        /// <param name="divisionIds">事业部ids</param>
        /// <param name="marketingIds">营销中心ids</param>
        /// <param name="dutyregionIds">大区ids</param>
        /// <param name="departmentIds">业务部ids</param>
        /// <param name="stationIds">工作站ids</param>
        /// <param name="distributorIds">经销商编码ids</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> ExportAsync(System.Guid? terminalId, System.Guid? accountId, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<MTerminalUserEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, System.Guid? distributorId, int? distributorType, System.Collections.Generic.IEnumerable<System.Guid> headOfficeIds, System.Collections.Generic.IEnumerable<System.Guid> divisionIds, System.Collections.Generic.IEnumerable<System.Guid> marketingIds, System.Collections.Generic.IEnumerable<System.Guid> dutyregionIds, System.Collections.Generic.IEnumerable<System.Guid> departmentIds, System.Collections.Generic.IEnumerable<System.Guid> stationIds, System.Collections.Generic.IEnumerable<System.Guid> distributorIds, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminalUser/Export?");
            if (terminalId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("TerminalId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(terminalId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (accountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("AccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowTitle != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowTitle") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowTitle, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_FileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.FileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_FileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Mode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowCopyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowCopyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowCopyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Copyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Copyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Copyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowColumnName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowColumnName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowColumnName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportPeople != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportPeople") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportPeople, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Columns != null)
            {
                foreach (var item_ in exportModel_Columns) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Columns") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportModel_Entities != null)
            {
                foreach (var item_ in exportModel_Entities) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Entities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isOutOfExportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsOutOfExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isOutOfExportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isExport != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsExport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isExport, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (queryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(queryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (distributorType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DistributorType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(distributorType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (headOfficeIds != null)
            {
                foreach (var item_ in headOfficeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("HeadOfficeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (divisionIds != null)
            {
                foreach (var item_ in divisionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DivisionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (marketingIds != null)
            {
                foreach (var item_ in marketingIds) { urlBuilder_.Append(System.Uri.EscapeDataString("MarketingIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (dutyregionIds != null)
            {
                foreach (var item_ in dutyregionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DutyregionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (departmentIds != null)
            {
                foreach (var item_ in departmentIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DepartmentIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (stationIds != null)
            {
                foreach (var item_ in stationIds) { urlBuilder_.Append(System.Uri.EscapeDataString("StationIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (distributorIds != null)
            {
                foreach (var item_ in distributorIds) { urlBuilder_.Append(System.Uri.EscapeDataString("DistributorIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/octet-stream");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(MTerminalUserAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(MTerminalUserAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminalUser/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminalUser/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids)
        {
            return DeleteSelectedAsync(ids, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 批量删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteSelectedAsync(System.Collections.Generic.IEnumerable<System.Guid> ids, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminalUser/DeleteSelected?");
            if (ids != null)
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminalUser/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(MTerminalUserUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(MTerminalUserUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/MTerminalUser/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class SyncAdvertiserClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public SyncAdvertiserClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 同步广告商主数据
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> SyncAsync(string date, string marketOrgCode)
        {
            return SyncAsync(date, marketOrgCode, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 同步广告商主数据
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> SyncAsync(string date, string marketOrgCode, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/SyncAdvertiser/Sync?");
            if (date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (marketOrgCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("marketOrgCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketOrgCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class SyncDtAndTmnClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public SyncDtAndTmnClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 同步经销商、终端主数据
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> SyncDataAsync(string marketOrgCD)
        {
            return SyncDataAsync(marketOrgCD, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 同步经销商、终端主数据
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> SyncDataAsync(string marketOrgCD, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/SyncDtAndTmn/SyncData?");
            if (marketOrgCD != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("marketOrgCD") + "=").Append(System.Uri.EscapeDataString(ConvertToString(marketOrgCD, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class SyncOrgUserClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public SyncOrgUserClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 同步组织人员主数据
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> SyncAsync(string date)
        {
            return SyncAsync(date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 同步组织人员主数据
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> SyncAsync(string date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/SyncOrgUser/Sync?");
            if (date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class SyncSettingClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public SyncSettingClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 同步配置信息测试
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> SyncAsync(string date)
        {
            return SyncAsync(date, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 同步配置信息测试
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> SyncAsync(string date, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/MainData/SyncSetting/Sync?");
            if (date != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("date") + "=").Append(System.Uri.EscapeDataString(ConvertToString(date, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// 返回结果模型接口
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public abstract partial class IResultModel
    {
        /// <summary>
        /// 是否成功
        /// </summary>
        [Newtonsoft.Json.JsonProperty("successful", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Successful { get; set; }

        /// <summary>
        /// 错误信息
        /// </summary>
        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        /// <summary>
        /// 业务码，用于业务中自定义
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// 时间戳
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Timestamp { get; set; }

    }

    /// <summary>
    /// 查询排序
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class QuerySortDto
    {
        /// <summary>
        /// 字段
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }

        /// <summary>
        /// 排序类型
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SortType Type { get; set; }

    }

    /// <summary>
    /// 排序规则
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public enum SortType
    {

        Asc = 0,

        Desc = 1,

    }

    /// <summary>
    /// 排序规则
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class Sort
    {
        /// <summary>
        /// 排序字段
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }

        /// <summary>
        /// 排序方式
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SortType Type { get; set; }

    }

    /// <summary>
    /// 广告商地点分配表 M_Re_ADAddressAccount添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MAdvertiserAccountAddressAddDto
    {
        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advertiserId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid AdvertiserId { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addrno", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Addrno { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advertiserAccountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid AdvertiserAccountId { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignstau", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Assignstau { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uuid { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stdate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stdate { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Endate { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maincd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Maincd { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bucode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bucode { get; set; }

    }

    /// <summary>
    /// 广告商地点分配表 M_Re_ADAddressAccount更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MAdvertiserAccountAddressUpdateDto : MAdvertiserAccountAddressAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 广告商银行账号表 M_ADBankAccount添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MAdvertiserAccountAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advertiserId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid AdvertiserId { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankAccount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankAccount { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankActNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankActNm { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankNm { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerNm { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCD { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateStart", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateStart { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateEnd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateEnd { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountTYP", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountTYP { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isMainFLG", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IsMainFLG { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bankInfoNUM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BankInfoNUM { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rbknum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Rbknum { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isValid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IsValid { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("areaCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AreaCode { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commercialBankDocumentNUM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CommercialBankDocumentNUM { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modelCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModelCode { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mainCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MainCode { get; set; }

    }

    /// <summary>
    /// 广告商银行账号表 M_ADBankAccount更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MAdvertiserAccountUpdateDto : MAdvertiserAccountAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 广告商地点表 M_ADAddress添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MAdvertiserAddressAddDto
    {
        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advertiserId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid AdvertiserId { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addrno", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Addrno { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addrdesc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Addrdesc { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zdesc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zdesc { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mainplace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mainplace { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orgid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Orgid { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orgcode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Orgcode { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orgname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Orgname { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locstatu", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locstatu { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invdate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Invdate { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fktj", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fktj { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coa", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Coa { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expacount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expacount { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advpacount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Advpacount { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fuacount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fuacount { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maincd", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Maincd { get; set; }

    }

    /// <summary>
    /// 广告商地点表 M_ADAddress更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MAdvertiserAddressUpdateDto : MAdvertiserAddressAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 广告商添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MAdvertiserAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advertiserCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdvertiserCode { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advertiserName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AdvertiserName { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("regionCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegionCD { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("adjc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Adjc { get; set; }

    }

    /// <summary>
    /// 广告商更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MAdvertiserUpdateDto : MAdvertiserAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 广告商营销组织关系表 M_Re_Org_AD添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MAdvertiserOrgAddDto
    {
        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketOrg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketOrg { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bigAreaOrg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BigAreaOrg { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officeOrg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficeOrg { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stationOrg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StationOrg { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("advertiserId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid AdvertiserId { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

    }

    /// <summary>
    /// 广告商营销组织关系表 M_Re_Org_AD更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MAdvertiserOrgUpdateDto : MAdvertiserOrgAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 城市区县 D_CityDistrict添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdCityDistrictAddDto
    {
        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cityCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CityCD { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cityNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CityNm { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("districtCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DistrictCD { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("districtNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DistrictNm { get; set; }

    }

    /// <summary>
    /// 城市区县 D_CityDistrict更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdCityDistrictUpdateDto : MdCityDistrictAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 国家省份 D_CountryProvince添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdCountryProvinceAddDto
    {
        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCD { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryNm { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provinceCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvinceCD { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provinceNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvinceNm { get; set; }

    }

    /// <summary>
    /// 国家省份 D_CountryProvince更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdCountryProvinceUpdateDto : MdCountryProvinceAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 区县街道 D_DistrictStreet添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdDistrictStreetAddDto
    {
        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("districtCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DistrictCD { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("districtNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DistrictNm { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetCD { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetNm { get; set; }

    }

    /// <summary>
    /// 区县街道 D_DistrictStreet更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdDistrictStreetUpdateDto : MdDistrictStreetAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 制高点配置 M_HeightConf添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdHeightConfAddDto
    {
        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("saleOrg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SaleOrg { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("height", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Height { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

    }

    /// <summary>
    /// 制高点配置 M_HeightConf更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdHeightConfUpdateDto : MdHeightConfAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 导出格式
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public enum ExportFormat
    {

        Xlsx = 0,

    }

    /// <summary>
    /// 导出模式
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public enum ExportMode
    {

        All = 0,

        CurrentPage = 1,

    }

    /// <summary>
    /// Excel导出列模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class ExcelExportColumnModel
    {
        /// <summary>
        /// 属性
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prop", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prop { get; set; }

        /// <summary>
        /// 说明
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// 对齐方式
        /// </summary>
        [Newtonsoft.Json.JsonProperty("align", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColumnAlign Align { get; set; }

        /// <summary>
        /// 格式化，暂时仅支持日期类型
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

    }

    /// <summary>
    /// 列对齐方式
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public enum ColumnAlign
    {

        Left = 0,

        Center = 1,

        Right = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MEntityExportDto : MEntityEntity
    {
        /// <summary>
        /// 状态
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabledNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EnabledNm { get; set; }

    }

    /// <summary>
    /// 业务实体
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MEntityEntity : EntityOfGuid
    {
        /// <summary>
        /// 编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityCode { get; set; }

        /// <summary>
        /// 名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityName { get; set; }

        /// <summary>
        /// 状态
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Enabled { get; set; }

        /// <summary>
        /// 用于上传OCMS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("erpCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErpCode { get; set; }

    }

    /// <summary>
    /// 包含指定类型主键的实体
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public abstract partial class EntityOfGuid
    {
        /// <summary>
        /// 主键
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// /// <br/>经销商/分销商添加模型
    /// <br/>            
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MDistributorAddDto
    {
        /// <summary>
        /// 客户编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributorCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string DistributorCode { get; set; }

        /// <summary>
        /// 客户名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributorName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(60, MinimumLength = 1)]
        public string DistributorName { get; set; }

        /// <summary>
        /// 类型：1经销商、2分销商
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributorType", Required = Newtonsoft.Json.Required.Always)]
        public int DistributorType { get; set; }

        /// <summary>
        /// 工作站id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid StationId { get; set; }

        /// <summary>
        /// 业务实体id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid EntityId { get; set; }

        /// <summary>
        /// CRM编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("crmCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string CrmCode { get; set; }

        /// <summary>
        /// 1表示主户；2管理开户的子户；3TPM虚拟子户
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detailType", Required = Newtonsoft.Json.Required.Always)]
        public int DetailType { get; set; }

        /// <summary>
        /// 状态
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        /// <summary>
        /// 经销商编码 用于经销商分析。主户填其自身编码；虚拟子户、管理开户的填主客户编码。
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string CustomerCode { get; set; }

        /// <summary>
        /// 子户父亲
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ParentId { get; set; }

        /// <summary>
        /// 是否跟CRM变动工作站
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSynchronizeCRMStation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IsSynchronizeCRMStation { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid CreatedBy { get; set; }

    }

    /// <summary>
    /// 经销商/分销商更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MDistributorUpdateDto : MDistributorAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 经销商分销商关系表
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MDistributorRelationEntity : EntityOfGuid
    {
        /// <summary>
        /// 经销商编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributorCode1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DistributorCode1 { get; set; }

        /// <summary>
        /// 分销商编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributorCode2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DistributorCode2 { get; set; }

        /// <summary>
        /// 经销商id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributorId1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid DistributorId1 { get; set; }

        /// <summary>
        /// 分销商id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributorId2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid DistributorId2 { get; set; }

    }

    /// <summary>
    /// 经销商分销商关系表添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MDistributorRelationAddDto
    {
        /// <summary>
        /// 经销商id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributorId1", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid DistributorId1 { get; set; }

        /// <summary>
        /// 分销商id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributorId2", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid DistributorId2 { get; set; }

    }

    /// <summary>
    /// 经销商分销商关系表更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MDistributorRelationUpdateDto : MDistributorRelationAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// KA大系统 M_KABigSysNameConf添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdKaBigSysNameConfAddDto
    {
        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("saleOrg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SaleOrg { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kaSystemNum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KaSystemNum { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("saleOrgNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SaleOrgNm { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kaSystemName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KaSystemName { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("kaLx", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KaLx { get; set; }

    }

    /// <summary>
    /// KA大系统 M_KABigSysNameConf更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdKaBigSysNameConfUpdateDto : MdKaBigSysNameConfAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 省份城市 D_ProvinceCity添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdProvinceCityAddDto
    {
        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provinceCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvinceCD { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("provinceNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProvinceNm { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cityCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CityCD { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cityNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CityNm { get; set; }

    }

    /// <summary>
    /// 省份城市 D_ProvinceCity更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdProvinceCityUpdateDto : MdProvinceCityAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 终端业态关系表 M_Re_Tmn_BTyte_Config添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdReTmnBTyteConfigAddDto
    {
        /// <summary>
        /// 终端编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tmnStoreType1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TmnStoreType1 { get; set; }

        /// <summary>
        /// 关系类型(ZS003:终端负责员工/ZS001:经销商业务员)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zbnType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZbnType { get; set; }

        /// <summary>
        /// 创建人
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zbnTypeTxt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZbnTypeTxt { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

    }

    /// <summary>
    /// 终端业态关系表 M_Re_Tmn_BTyte_Config更新模型
    /// <br/>            
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdReTmnBTyteConfigUpdateDto : MdReTmnBTyteConfigAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 业务线 D_SaleLine添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdSaleLineAddDto
    {
        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lineCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LineCD { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lineNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LineNm { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

    }

    /// <summary>
    /// 业务线 D_SaleLine更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdSaleLineUpdateDto : MdSaleLineAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 街道村 D_StreetVillage添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdStreetVillageAddDto
    {
        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetCD { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetNm { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("villageCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VillageCD { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("villageNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VillageNm { get; set; }

    }

    /// <summary>
    /// 街道村 D_StreetVillage更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdStreetVillageUpdateDto : MdStreetVillageAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 终端类型（一二三级） M_TmnType添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdTmnTypeAddDto
    {
        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("regionCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegionCD { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lineCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LineCD { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lineNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LineNm { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level1TypeCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Level1TypeCD { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level1TypeNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Level1TypeNm { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level2TypeCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Level2TypeCD { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level2TypeNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Level2TypeNm { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level3TypeCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Level3TypeCD { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level3TypeNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Level3TypeNm { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketOrgCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketOrgCD { get; set; }

    }

    /// <summary>
    /// 终端类型（一二三级） M_TmnType更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MdTmnTypeUpdateDto : MdTmnTypeAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 业务实体添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MEntityAddDto
    {
        /// <summary>
        /// 编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string EntityCode { get; set; }

        /// <summary>
        /// 名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string EntityName { get; set; }

        /// <summary>
        /// 状态
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Enabled { get; set; }

        /// <summary>
        /// 用于上传OCMS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("erpCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string ErpCode { get; set; }

    }

    /// <summary>
    /// 业务实体更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MEntityUpdateDto : MEntityAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 营销中心产品
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MMarketingProductEntity : EntityOfGuid
    {
        /// <summary>
        /// 营销中心id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketingId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid MarketingId { get; set; }

        /// <summary>
        /// 产品id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ProductId { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Enabled { get; set; }

    }

    /// <summary>
    /// 营销中心产品添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MMarketingProductAddDto
    {
        /// <summary>
        /// 营销中心id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketingId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid MarketingId { get; set; }

        /// <summary>
        /// 产品id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ProductId { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Enabled { get; set; }

    }

    /// <summary>
    /// 营销中心产品更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MMarketingProductUpdateDto : MMarketingProductAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 营销中心配置
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MMarketingSetupEntity : EntityBaseOfGuid
    {
        /// <summary>
        /// 营销中心id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketingId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid MarketingId { get; set; }

        /// <summary>
        /// 是否真实营销中心
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IsReal { get; set; }

        /// <summary>
        /// 是否同步CRM组织
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSynchronizeCRM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IsSynchronizeCRM { get; set; }

        /// <summary>
        /// 客户是否同步CRM工作站
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSynchronizeCRMDistributorStation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IsSynchronizeCRMDistributorStation { get; set; }

    }

    /// <summary>
    /// 通用实体基类
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class EntityBaseOfGuid : EntityOfGuid
    {
        /// <summary>
        /// 创建人编号
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid CreatedBy { get; set; }

        /// <summary>
        /// 创建人名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Creator { get; set; }

        /// <summary>
        /// 创建时间
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedTime { get; set; }

        /// <summary>
        /// 修改人编号
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modifiedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? ModifiedBy { get; set; }

        /// <summary>
        /// 修改人名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Modifier { get; set; }

        /// <summary>
        /// 修改时间
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modifiedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ModifiedTime { get; set; }

    }

    /// <summary>
    /// 营销中心配置添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MMarketingSetupAddDto
    {
        /// <summary>
        /// 营销中心id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketingId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid MarketingId { get; set; }

        /// <summary>
        /// 是否真实营销中心
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isReal", Required = Newtonsoft.Json.Required.Always)]
        public bool IsReal { get; set; }

        /// <summary>
        /// 是否同步CRM组织
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSynchronizeCRM", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSynchronizeCRM { get; set; }

        /// <summary>
        /// 客户是否同步CRM工作站
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSynchronizeCRMDistributorStation", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSynchronizeCRMDistributorStation { get; set; }

    }

    /// <summary>
    /// 营销中心配置更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MMarketingSetupUpdateDto : MMarketingSetupAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 对象表，营销中心、大区、业务部、工作站、客户 的主键是 数据本身的主键添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MObjectAddDto
    {
        /// <summary>
        /// 层级（1-雪花总部、2-事业部、3-营销中心、4-大区、5-业务部、6-工作站、7-客户）
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Type { get; set; }

        /// <summary>
        /// 对象编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("objectCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectCode { get; set; }

        /// <summary>
        /// 对象名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("objectName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ObjectName { get; set; }

        /// <summary>
        /// 营销中心id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketingId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid MarketingId { get; set; }

        /// <summary>
        /// 营销中心编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketingCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketingCode { get; set; }

        /// <summary>
        /// 营销中心名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketingName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MarketingName { get; set; }

        /// <summary>
        /// 大区id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bigAreaId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid BigAreaId { get; set; }

        /// <summary>
        /// 大区编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bigAreaCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BigAreaCode { get; set; }

        /// <summary>
        /// 大区名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bigAreaName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BigAreaName { get; set; }

        /// <summary>
        /// 业务部id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid OfficeId { get; set; }

        /// <summary>
        /// 业务部编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficeCode { get; set; }

        /// <summary>
        /// 业务部名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("officeName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OfficeName { get; set; }

        /// <summary>
        /// 工作站id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid StationId { get; set; }

        /// <summary>
        /// 工作站编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stationCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StationCode { get; set; }

        /// <summary>
        /// 工作站名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stationName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StationName { get; set; }

        /// <summary>
        /// 客户id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributorId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid DistributorId { get; set; }

        /// <summary>
        /// 客户编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributorCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DistributorCode { get; set; }

        /// <summary>
        /// 客户名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributorName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DistributorName { get; set; }

    }

    /// <summary>
    /// 对象表，营销中心、大区、业务部、工作站、客户 的主键是 数据本身的主键更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MObjectUpdateDto : MObjectAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 组织表添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MOrgAddDto
    {
        /// <summary>
        /// 组织编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orgCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        public string OrgCode { get; set; }

        /// <summary>
        /// 组织名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orgName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        public string OrgName { get; set; }

        /// <summary>
        /// 层级（1-雪花总部、2-事业部、3-营销中心、4-大区、5-业务部、6-工作站）
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public int Type { get; set; }

        /// <summary>
        /// 父级id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid ParentId { get; set; }

        /// <summary>
        /// 作废映射，多个用“|”分隔
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invalidMapping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string InvalidMapping { get; set; }

        /// <summary>
        /// 备注
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string Remark { get; set; }

        /// <summary>
        /// 生效时间
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset StartTime { get; set; }

        /// <summary>
        /// 失效时间
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset EndTime { get; set; }

        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Enabled { get; set; }

        /// <summary>
        /// 组织属性 1 业务部门 2 职能部门
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attribute", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Attribute { get; set; }

    }

    /// <summary>
    /// 组织表更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MOrgUpdateDto : MOrgAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MProductEntity : EntityBaseSoftDeleteOfGuid
    {
        /// <summary>
        /// 编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductCode { get; set; }

        /// <summary>
        /// 名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductName { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bottleBox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BottleBox { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("capacity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Capacity { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("className", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClassName { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("volumeName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VolumeName { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brandName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandName { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outPackName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OutPackName { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inPackName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InPackName { get; set; }

        /// <summary>
        /// 1（17位码）；2（11位码）；3（促销品）……
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProductType { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productSpecName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductSpecName { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("litreConversionRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? LitreConversionRate { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Enabled { get; set; }

        /// <summary>
        /// 17位对应的11位码产品id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ParentId { get; set; }

        /// <summary>
        /// 集团码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupCode { get; set; }

        /// <summary>
        /// 集团名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupName { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Sort { get; set; }

        /// <summary>
        /// 特征码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("characterCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CharacterCode { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Remark { get; set; }

    }

    /// <summary>
    /// 软删除基类实体
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class EntityBaseSoftDeleteOfGuid : EntityBaseOfGuid
    {
        /// <summary>
        /// 已删除的
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deleted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Deleted { get; set; }

        /// <summary>
        /// 删除人编号
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deletedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? DeletedBy { get; set; }

        /// <summary>
        /// 删除人名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deleter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deleter { get; set; }

        /// <summary>
        /// 删除时间
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deletedTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeletedTime { get; set; }

    }

    /// <summary>
    /// 添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MProductAddDto
    {
        /// <summary>
        /// 编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ProductCode { get; set; }

        /// <summary>
        /// 名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string ProductName { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bottleBox", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BottleBox { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("capacity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Capacity { get; set; }

        /// <summary>
        /// 类别名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("className", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string ClassName { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("volumeName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VolumeName { get; set; }

        /// <summary>
        /// 品牌名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brandName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string BrandName { get; set; }

        /// <summary>
        /// 外包装
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outPackName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string OutPackName { get; set; }

        /// <summary>
        /// 内包装
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inPackName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string InPackName { get; set; }

        /// <summary>
        /// 1（17位码）；2（11位码）；3（促销品）……
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ProductType { get; set; }

        /// <summary>
        /// 产品规格
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productSpecName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ProductSpecName { get; set; }

        /// <summary>
        /// 升转换
        /// </summary>
        [Newtonsoft.Json.JsonProperty("litreConversionRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal LitreConversionRate { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Enabled { get; set; }

        /// <summary>
        /// 17位对应的11位码产品id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ParentId { get; set; }

        /// <summary>
        /// 集团码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string GroupCode { get; set; }

        /// <summary>
        /// 集团名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string GroupName { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Sort { get; set; }

        /// <summary>
        /// 特征码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("characterCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string CharacterCode { get; set; }

        /// <summary>
        /// 备注
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remark", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string Remark { get; set; }

    }

    /// <summary>
    /// 更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MProductUpdateDto : MProductAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 营销产品属性添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MProductMarketingPropertyAddDto
    {
        /// <summary>
        /// 营销中心id（orgid）
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketingId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid MarketingId { get; set; }

        /// <summary>
        /// 产品id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ProductId { get; set; }

        /// <summary>
        /// 品牌
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Brand { get; set; }

        /// <summary>
        /// 子品牌
        /// </summary>
        [Newtonsoft.Json.JsonProperty("brandChild", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BrandChild { get; set; }

        /// <summary>
        /// 重点产品
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyProduct", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KeyProduct { get; set; }

        /// <summary>
        /// 产品简称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("abbreviation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Abbreviation { get; set; }

    }

    /// <summary>
    /// 营销产品属性更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MProductMarketingPropertyUpdateDto : MProductMarketingPropertyAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 产品属性
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MProductPropertyEntity : EntityOfGuid
    {
        /// <summary>
        /// 类型id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productPropertiesType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ProductPropertiesType { get; set; }

        /// <summary>
        /// 编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productPropertiesCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductPropertiesCode { get; set; }

        /// <summary>
        /// 名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productPropertiesName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductPropertiesName { get; set; }

        /// <summary>
        /// 排序
        /// <br/>            
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Sort { get; set; }

    }

    /// <summary>
    /// 产品属性添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MProductPropertyAddDto
    {
        /// <summary>
        /// 类型
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productPropertiesType", Required = Newtonsoft.Json.Required.Always)]
        public int ProductPropertiesType { get; set; }

        /// <summary>
        /// 编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productPropertiesCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string ProductPropertiesCode { get; set; }

        /// <summary>
        /// 名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productPropertiesName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string ProductPropertiesName { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.Always)]
        public int Sort { get; set; }

    }

    /// <summary>
    /// 产品属性更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MProductPropertyUpdateDto : MProductPropertyAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 终端信息
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MTerminalEntity : EntityOfGuid
    {
        /// <summary>
        /// 编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("terminalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TerminalCode { get; set; }

        /// <summary>
        /// 名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("terminalName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TerminalName { get; set; }

        /// <summary>
        /// 工作站id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid StationId { get; set; }

        /// <summary>
        /// 业务线
        /// </summary>
        [Newtonsoft.Json.JsonProperty("saleLine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SaleLine { get; set; }

        /// <summary>
        /// 一级类型
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lvl1Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lvl1Type { get; set; }

        /// <summary>
        /// 二级类型
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lvl2Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lvl2Type { get; set; }

        /// <summary>
        /// 三级类型
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lvl3Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lvl3Type { get; set; }

        /// <summary>
        /// 状态
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        /// <summary>
        /// 地址
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Address { get; set; }

        /// <summary>
        /// 工作站编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stationOrgCD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StationOrgCD { get; set; }

    }

    /// <summary>
    /// /// <br/>终端信息添加模型
    /// <br/>            
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MTerminalAddDto
    {
        /// <summary>
        /// 终端编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("terminalCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        public string TerminalCode { get; set; }

        /// <summary>
        /// 终端名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("terminalName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string TerminalName { get; set; }

        /// <summary>
        /// 工作站id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("stationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid StationId { get; set; }

        /// <summary>
        /// 业务线
        /// </summary>
        [Newtonsoft.Json.JsonProperty("saleLine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string SaleLine { get; set; }

        /// <summary>
        /// 业务线
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lvl1Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lvl1Type { get; set; }

        /// <summary>
        /// 业务线
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lvl2Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lvl2Type { get; set; }

        /// <summary>
        /// 业务线
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lvl3Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lvl3Type { get; set; }

        /// <summary>
        /// 状态
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        /// <summary>
        /// 地址
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string Address { get; set; }

    }

    /// <summary>
    /// 终端信息更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MTerminalUpdateDto : MTerminalAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// /// <br/>终端其他信息添加模型
    /// <br/>            
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MTerminalDetailAddDto
    {
        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tel { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prov", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prov { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("village", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Village { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddDetail { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tmnOwner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TmnOwner { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tmnPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TmnPhone { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per1Nm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per1Nm { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per1Post", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per1Post { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per1Bir", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per1Bir { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per1Tel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per1Tel { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per2Nm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per2Nm { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per2Post", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per2Post { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per2Bir", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per2Bir { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per2Tel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per2Tel { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per3Nm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per3Nm { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per3Post", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per3Post { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per3Bir", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per3Bir { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("per3Tel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Per3Tel { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("geo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Geo { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("coopNature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CoopNature { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sysNum", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SysNum { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sysNm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SysNm { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("saleChannel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SaleChannel { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isProtocol", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IsProtocol { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Rl { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("xyly", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Xyly { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zgdfl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zgdfl { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("faxNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FaxNumber { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("namCountry", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NamCountry { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkaSystem1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkaSystem1 { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzfmS_MUM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzfmS_MUM { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzTable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzTable { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzSeat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzSeat { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzweixiN_NUM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzweixiN_NUM { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzAge", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzAge { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzInner_Area", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzInner_Area { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzOut_Area", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzOut_Area { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzbeer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zzbeer { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzchaiN_NAME", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzchaiN_NAME { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzchaiN_TEL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzchaiN_TEL { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzchaiN_TYPE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzchaiN_TYPE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzchaiN_QUA", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzchaiN_QUA { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzchaiN_NUM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzchaiN_NUM { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzcuisine", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zzcuisine { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzcharacteristic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zzcharacteristic { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzperconsume", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zzperconsume { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzopeN_TIME", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzopeN_TIME { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzfreezer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zzfreezer { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzflD0000CG", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzflD0000CG { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzvirtual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zzvirtual { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzvisit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Zzvisit { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzcharacter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zzcharacter { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzstorage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zzstorage { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzflD000052", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzflD000052 { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzsmallboX_NUM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzsmallboX_NUM { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzprO_NUM2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzprO_NUM2 { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzprO_NAME2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzprO_NAME2 { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzalco", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zzalco { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzbesT_TIME", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzbesT_TIME { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzwheT_CHAIN", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzwheT_CHAIN { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzbigboX_NUM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzbigboX_NUM { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzmidboX_NUM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzmidboX_NUM { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzporN_PRICE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzporN_PRICE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzprO_RANK", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzprO_RANK { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzdaY_REVENUE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzdaY_REVENUE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzcashieR_NUM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzcashieR_NUM { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzdistrI_WAY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzdistrI_WAY { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzflD00005D", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal ZzflD00005D { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzreconciliation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zzreconciliation { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzaccounT_WAY", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzaccounT_WAY { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzacccounT_TIME", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzacccounT_TIME { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzfiperson", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zzfiperson { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzfipersoN_TEL", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzfipersoN_TEL { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("e_MAILSMT", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string E_MAILSMT { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uriuri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uriuri { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bz", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Bz { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzdeliveR_NOTE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzdeliveR_NOTE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzcarlimiT_DESC", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzcarlimiT_DESC { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzaccounT_PERIOD", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzaccounT_PERIOD { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkabeeR_NUM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkabeeR_NUM { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkabeeR_PILE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkabeeR_PILE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkanonbeeR_PILE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkanonbeeR_PILE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkaicE_NUM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkaicE_NUM { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkacolD_NUM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkacolD_NUM { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkashelF_NUM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkashelF_NUM { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkaleveL_NUM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkaleveL_NUM { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkawholeboX_NUM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkawholeboX_NUM { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkapackagE_NUM", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkapackagE_NUM { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkapilE_USE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkapilE_USE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkanonpilE_USE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkanonpilE_USE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkaprO_USE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkaprO_USE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkashelF_USE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkashelF_USE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkaicE_USE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkaicE_USE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkacolD_USE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkacolD_USE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkacasheR_USE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkacasheR_USE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkamultI_USE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkamultI_USE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkadisplaY_USE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkadisplaY_USE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkapileouT_USE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkapileouT_USE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzflD0000G2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzflD0000G2 { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkaflaG_USE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkaflaG_USE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkaposT_USE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkaposT_USE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkaaB_USE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkaaB_USE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzflD0000G6", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzflD0000G6 { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkaladdeR_USE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkaladdeR_USE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkaservicE_USE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkaservicE_USE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkapoP_USE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkapoP_USE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzkalivelY_USE", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzkalivelY_USE { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzbox", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Zzbox { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzdecK_NAME", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZzdecK_NAME { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zbnType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZbnType { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzgsyyzzh", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zzgsyyzzh { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zzgszzmc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zzgszzmc { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deleted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deleted { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deletedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid DeletedBy { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deleter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Deleter { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deletedTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DeletedTime { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid CreatedBy { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Creator { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedTime { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modifiedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ModifiedBy { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modifier", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Modifier { get; set; }

        /// <summary>
        ///             
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modifiedTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ModifiedTime { get; set; }

    }

    /// <summary>
    /// 终端其他信息更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MTerminalDetailUpdateDto : MTerminalDetailAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 终端与经销商的关系信息
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MTerminalDistributorEntity : EntityOfGuid
    {
        /// <summary>
        /// 终端编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("terminalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TerminalCode { get; set; }

        /// <summary>
        /// 经销商编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributorCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DistributorCode { get; set; }

        /// <summary>
        /// 终端id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("terminalId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid TerminalId { get; set; }

        /// <summary>
        /// 经销商id/分销商id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributorId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid DistributorId { get; set; }

    }

    /// <summary>
    /// 终端与经销商的关系信息添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MTerminalDistributorAddDto
    {
        /// <summary>
        /// 终端编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("terminalId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid TerminalId { get; set; }

        /// <summary>
        /// 经销商编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributorId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid DistributorId { get; set; }

    }

    /// <summary>
    /// 终端与经销商的关系信息更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MTerminalDistributorUpdateDto : MTerminalDistributorAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 终端与经销商的关系信息
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MTerminalUserEntity : EntityOfGuid
    {
        /// <summary>
        /// 终端编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("terminalCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TerminalCode { get; set; }

        /// <summary>
        /// 业务员
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userBP", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserBP { get; set; }

        /// <summary>
        /// 用户id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid AccountId { get; set; }

        /// <summary>
        /// 终端id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("terminalId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid TerminalId { get; set; }

    }

    /// <summary>
    /// /// <br/>终端与经销商的关系信息添加模型
    /// <br/>            
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MTerminalUserAddDto
    {
        /// <summary>
        /// 终端id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("terminalId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid TerminalId { get; set; }

        /// <summary>
        /// 业务员
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid AccountId { get; set; }

    }

    /// <summary>
    /// 终端与经销商的关系信息更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class MTerminalUserUpdateDto : MTerminalUserAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603