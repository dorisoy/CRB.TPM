//----------------------
// <auto-generated>
//     Generated using the CRB.TPM.OpenAPIGenerator v1.0.0.0 
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace CRB.TPM.Mod.Logging
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class CrmDataClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public CrmDataClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="id">客户id、终端id</param>
        /// <param name="dataType">数据类型，7-客户；8-终端</param>
        /// <param name="code">客户编码、终端编码</param>
        /// <param name="jsonString">json值</param>
        /// <param name="zDATE">crm时间</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, int? dataType, string code, string jsonString, System.DateTimeOffset? zDATE, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, dataType, code, jsonString, zDATE, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="id">客户id、终端id</param>
        /// <param name="dataType">数据类型，7-客户；8-终端</param>
        /// <param name="code">客户编码、终端编码</param>
        /// <param name="jsonString">json值</param>
        /// <param name="zDATE">crm时间</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, int? dataType, string code, string jsonString, System.DateTimeOffset? zDATE, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Logging/CrmData/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (dataType != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("DataType") + "=").Append(System.Uri.EscapeDataString(ConvertToString(dataType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (code != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Code") + "=").Append(System.Uri.EscapeDataString(ConvertToString(code, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (jsonString != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("JsonString") + "=").Append(System.Uri.EscapeDataString(ConvertToString(jsonString, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zDATE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZDATE") + "=").Append(System.Uri.EscapeDataString(zDATE.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(CrmDataAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(CrmDataAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Logging/CrmData/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Logging/CrmData/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Logging/CrmData/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(CrmDataUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(CrmDataUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Logging/CrmData/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class CrmRelationClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public CrmRelationClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="code1">编码1</param>
        /// <param name="code2">编码2</param>
        /// <param name="rELTYP">关系类型</param>
        /// <param name="zUPDMODE">操作类型，D是删除；其他都可看作新增</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string code1, string code2, string rELTYP, string zUPDMODE, string zDATE, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, code1, code2, rELTYP, zUPDMODE, zDATE, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="code1">编码1</param>
        /// <param name="code2">编码2</param>
        /// <param name="rELTYP">关系类型</param>
        /// <param name="zUPDMODE">操作类型，D是删除；其他都可看作新增</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string code1, string code2, string rELTYP, string zUPDMODE, string zDATE, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Logging/CrmRelation/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (code1 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Code1") + "=").Append(System.Uri.EscapeDataString(ConvertToString(code1, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (code2 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Code2") + "=").Append(System.Uri.EscapeDataString(ConvertToString(code2, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (rELTYP != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("RELTYP") + "=").Append(System.Uri.EscapeDataString(ConvertToString(rELTYP, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zUPDMODE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZUPDMODE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zUPDMODE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zDATE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZDATE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zDATE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(CrmRelationAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(CrmRelationAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Logging/CrmRelation/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Logging/CrmRelation/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Logging/CrmRelation/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(CrmRelationUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(CrmRelationUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Logging/CrmRelation/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class CrmRewriteClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public CrmRewriteClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="pARTNER1">CODE1</param>
        /// <param name="pARTNER2">CODE2</param>
        /// <param name="createTime">创建时间</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string pARTNER1, string pARTNER2, string zUSER, string zTYPE, string zTYPE_1, string zDATE, string zBAIOS, System.DateTimeOffset? createTime, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(id, pARTNER1, pARTNER2, zUSER, zTYPE, zTYPE_1, zDATE, zBAIOS, createTime, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询
        /// </summary>
        /// <param name="pARTNER1">CODE1</param>
        /// <param name="pARTNER2">CODE2</param>
        /// <param name="createTime">创建时间</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> QueryAsync(System.Guid? id, string pARTNER1, string pARTNER2, string zUSER, string zTYPE, string zTYPE_1, string zDATE, string zBAIOS, System.DateTimeOffset? createTime, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Logging/CrmRewrite/Query?");
            if (id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pARTNER1 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PARTNER1") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pARTNER1, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pARTNER2 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PARTNER2") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pARTNER2, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zUSER != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZUSER") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zUSER, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zTYPE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZTYPE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zTYPE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zTYPE_1 != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZTYPE_1") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zTYPE_1, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zDATE != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZDATE") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zDATE, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (zBAIOS != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ZBAIOS") + "=").Append(System.Uri.EscapeDataString(ConvertToString(zBAIOS, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (createTime != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("CreateTime") + "=").Append(System.Uri.EscapeDataString(createTime.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(CrmRewriteAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(CrmRewriteAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Logging/CrmRewrite/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Logging/CrmRewrite/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id)
        {
            return EditAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 编辑
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> EditAsync(System.Guid id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Logging/CrmRewrite/Edit?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> UpdateAsync(CrmRewriteUpdateDto dto)
        {
            return UpdateAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 修改
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> UpdateAsync(CrmRewriteUpdateDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Logging/CrmRewrite/Update");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class LogClient 
    {
        private string _baseUrl = "http://localhost:6220";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public LogClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// 查询日志
        /// </summary>
        /// <param name="accountId">账户编号</param>
        /// <param name="platform">登录平台</param>
        /// <param name="loginMode">登录方式</param>
        /// <param name="startDate">开始日期</param>
        /// <param name="endDate">开始日期</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PagingQueryResultModelOfLoginLogEntity> QueryAsync(System.Guid? accountId, int? platform, LoginMode? loginMode, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<LoginLogEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id)
        {
            return QueryAsync(accountId, platform, loginMode, startDate, endDate, exportModel_ShowTitle, exportModel_Title, exportModel_FileName, exportModel_Format, exportModel_Mode, exportModel_ShowCopyright, exportModel_Copyright, exportModel_ShowColumnName, exportModel_ShowExportDate, exportModel_ShowExportPeople, exportModel_Columns, exportModel_Entities, exportCount, exportCountLimit, isOutOfExportCountLimit, isExport, queryCount, page_Index, page_Size, page_Sort, paging_Index, paging_Size, paging_MaxSize, paging_Skip, paging_TotalCount, paging_QueryCount, paging_TotalPage, paging_OrderBy, paging_Test_Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 查询日志
        /// </summary>
        /// <param name="accountId">账户编号</param>
        /// <param name="platform">登录平台</param>
        /// <param name="loginMode">登录方式</param>
        /// <param name="startDate">开始日期</param>
        /// <param name="endDate">开始日期</param>
        /// <param name="exportModel_ShowTitle">是否显示标题</param>
        /// <param name="exportModel_Title">标题</param>
        /// <param name="exportModel_FileName">文件名</param>
        /// <param name="exportModel_Format">导出格式</param>
        /// <param name="exportModel_Mode">导出模式</param>
        /// <param name="exportModel_ShowCopyright">是否显示版权信息</param>
        /// <param name="exportModel_Copyright">版权信息</param>
        /// <param name="exportModel_ShowColumnName">是否显示列名称</param>
        /// <param name="exportModel_ShowExportDate">是否 显示导出日期</param>
        /// <param name="exportModel_ShowExportPeople">是否显示导出人</param>
        /// <param name="exportModel_Columns">导出的列信息</param>
        /// <param name="exportModel_Entities">实体集合</param>
        /// <param name="exportCount">导出数量</param>
        /// <param name="exportCountLimit">导出数量限制</param>
        /// <param name="isOutOfExportCountLimit">是否超出导出数量限制</param>
        /// <param name="isExport">是否是导出操作</param>
        /// <param name="queryCount">查询数量</param>
        /// <param name="page_Index">当前页</param>
        /// <param name="page_Size">页大小</param>
        /// <param name="page_Sort">排序字段</param>
        /// <param name="paging_Index">页码</param>
        /// <param name="paging_Size">页大小</param>
        /// <param name="paging_MaxSize">页大小最大值，防止失误返回过大数据</param>
        /// <param name="paging_Skip">跳过数量</param>
        /// <param name="paging_TotalCount">总数量</param>
        /// <param name="paging_QueryCount">是否查询总数</param>
        /// <param name="paging_TotalPage">总页数</param>
        /// <param name="paging_OrderBy">排序</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PagingQueryResultModelOfLoginLogEntity> QueryAsync(System.Guid? accountId, int? platform, LoginMode? loginMode, System.DateTimeOffset? startDate, System.DateTimeOffset? endDate, bool? exportModel_ShowTitle, string exportModel_Title, string exportModel_FileName, ExportFormat? exportModel_Format, ExportMode? exportModel_Mode, bool? exportModel_ShowCopyright, string exportModel_Copyright, bool? exportModel_ShowColumnName, bool? exportModel_ShowExportDate, bool? exportModel_ShowExportPeople, System.Collections.Generic.IEnumerable<ExcelExportColumnModel> exportModel_Columns, System.Collections.Generic.IEnumerable<LoginLogEntity> exportModel_Entities, long? exportCount, int? exportCountLimit, bool? isOutOfExportCountLimit, bool? isExport, bool? queryCount, int? page_Index, int? page_Size, System.Collections.Generic.IEnumerable<QuerySortDto> page_Sort, int? paging_Index, int? paging_Size, int? paging_MaxSize, int? paging_Skip, long? paging_TotalCount, bool? paging_QueryCount, long? paging_TotalPage, System.Collections.Generic.IEnumerable<Sort> paging_OrderBy, int? paging_Test_Id, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Logging/Log/Query?");
            if (accountId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("AccountId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(accountId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (platform != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Platform") + "=").Append(System.Uri.EscapeDataString(ConvertToString(platform, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (loginMode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("LoginMode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(loginMode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (startDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("StartDate") + "=").Append(System.Uri.EscapeDataString(startDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (endDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("EndDate") + "=").Append(System.Uri.EscapeDataString(endDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowTitle != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowTitle") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowTitle, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Title != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Title") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Title, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_FileName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.FileName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_FileName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Format != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Format") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Format, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Mode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Mode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Mode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowCopyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowCopyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowCopyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Copyright != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Copyright") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_Copyright, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowColumnName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowColumnName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowColumnName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_ShowExportPeople != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.ShowExportPeople") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportModel_ShowExportPeople, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportModel_Columns != null)
            {
                foreach (var item_ in exportModel_Columns) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Columns") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportModel_Entities != null)
            {
                foreach (var item_ in exportModel_Entities) { urlBuilder_.Append(System.Uri.EscapeDataString("ExportModel.Entities") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (exportCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (exportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(exportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isOutOfExportCountLimit != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsOutOfExportCountLimit") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isOutOfExportCountLimit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isExport != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("IsExport") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isExport, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (queryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(queryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Page.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(page_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (page_Sort != null)
            {
                foreach (var item_ in page_Sort) { urlBuilder_.Append(System.Uri.EscapeDataString("Page.Sort") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Index != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Index") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Index, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Size != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Size") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Size, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_MaxSize != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.MaxSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_MaxSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_Skip != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Skip") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Skip, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_QueryCount != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.QueryCount") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_QueryCount, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_TotalPage != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.TotalPage") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_TotalPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (paging_OrderBy != null)
            {
                foreach (var item_ in paging_OrderBy) { urlBuilder_.Append(System.Uri.EscapeDataString("Paging.OrderBy") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (paging_Test_Id != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("Paging.Test.Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(paging_Test_Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PagingQueryResultModelOfLoginLogEntity>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 添加日志
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> AddAsync(LoginLogAddDto dto)
        {
            return AddAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 添加日志
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> AddAsync(LoginLogAddDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Logging/Log/Add");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 删除日志
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<IResultModel> DeleteAsync(int id)
        {
            return DeleteAsync(id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 删除日志
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<IResultModel> DeleteAsync(int id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Logging/Log/Delete?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<IResultModel>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// 导出登录日志
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> LoginExportAsync(LoginLogQueryDto dto)
        {
            return LoginExportAsync(dto, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// 导出登录日志
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> LoginExportAsync(LoginLogQueryDto dto, System.Threading.CancellationToken cancellationToken)
        {
            if (dto == null)
                throw new System.ArgumentNullException("dto");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/Logging/Log/LoginExport");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(dto, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// 返回结果模型接口
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public abstract partial class IResultModel
    {
        /// <summary>
        /// 是否成功
        /// </summary>
        [Newtonsoft.Json.JsonProperty("successful", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Successful { get; set; }

        /// <summary>
        /// 错误信息
        /// </summary>
        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        /// <summary>
        /// 业务码，用于业务中自定义
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// 时间戳
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Timestamp { get; set; }

    }

    /// <summary>
    /// 查询排序
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class QuerySortDto
    {
        /// <summary>
        /// 字段
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }

        /// <summary>
        /// 排序类型
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SortType Type { get; set; }

    }

    /// <summary>
    /// 排序规则
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public enum SortType
    {

        Asc = 0,

        Desc = 1,

    }

    /// <summary>
    /// 排序规则
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class Sort
    {
        /// <summary>
        /// 排序字段
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }

        /// <summary>
        /// 排序方式
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SortType Type { get; set; }

    }

    /// <summary>
    /// CRM客户、终端记录添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class CrmDataAddDto
    {
        /// <summary>
        /// 数据类型，7-客户；8-终端
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int DataType { get; set; }

        /// <summary>
        /// 客户编码、终端编码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// json值
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jsonString", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JsonString { get; set; }

        /// <summary>
        /// crm时间
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zdate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Zdate { get; set; }

    }

    /// <summary>
    /// CRM客户、终端记录更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class CrmDataUpdateDto : CrmDataAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// /// <br/>CRM的关系变动记录表添加模型
    /// <br/>            
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class CrmRelationAddDto
    {
        /// <summary>
        /// 编码1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code1 { get; set; }

        /// <summary>
        /// 编码2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code2 { get; set; }

        /// <summary>
        /// 关系类型
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reltyp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reltyp { get; set; }

        /// <summary>
        /// 操作类型，D是删除；其他都可看作新增
        /// </summary>
        [Newtonsoft.Json.JsonProperty("zupdmode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zupdmode { get; set; }

        [Newtonsoft.Json.JsonProperty("zdate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zdate { get; set; }

    }

    /// <summary>
    /// CRM的关系变动记录表更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class CrmRelationUpdateDto : CrmRelationAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 返写CRM记录添加模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class CrmRewriteAddDto
    {
        /// <summary>
        /// CODE1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partneR1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartneR1 { get; set; }

        /// <summary>
        /// CODE2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partneR2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PartneR2 { get; set; }

        [Newtonsoft.Json.JsonProperty("zuser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zuser { get; set; }

        [Newtonsoft.Json.JsonProperty("ztype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ztype { get; set; }

        [Newtonsoft.Json.JsonProperty("ztypE_1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZtypE_1 { get; set; }

        [Newtonsoft.Json.JsonProperty("zdate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zdate { get; set; }

        [Newtonsoft.Json.JsonProperty("zbaios", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Zbaios { get; set; }

        /// <summary>
        /// 创建时间
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreateTime { get; set; }

    }

    /// <summary>
    /// 返写CRM记录更新模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class CrmRewriteUpdateDto : CrmRewriteAddDto
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid Id { get; set; }

    }

    /// <summary>
    /// 分页查询结果模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class PagingQueryResultModelOfLoginLogEntity
    {
        /// <summary>
        /// 处理是否成功
        /// </summary>
        [Newtonsoft.Json.JsonProperty("successful", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Successful { get; set; }

        /// <summary>
        /// 错误信息
        /// </summary>
        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        /// <summary>
        /// 业务码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// 时间戳
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Timestamp { get; set; }

        /// <summary>
        /// 返回数据
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagingQueryResultBodyOfLoginLogEntity Data { get; set; }

    }

    /// <summary>
    /// 分页查询结果内容
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class PagingQueryResultBodyOfLoginLogEntity
    {
        /// <summary>
        /// 总数
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// 数据集
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoginLogEntity> Rows { get; set; }

        /// <summary>
        /// 扩展数据
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Data { get; set; }

    }

    /// <summary>
    /// 登录日志
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class LoginLogEntity : EntityOfLong
    {
        /// <summary>
        /// 账户编号
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? AccountId { get; set; }

        /// <summary>
        /// 平台
        /// </summary>
        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Platform { get; set; }

        /// <summary>
        /// 登录方式
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loginMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoginMode LoginMode { get; set; }

        /// <summary>
        /// 用户名
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserName { get; set; }

        /// <summary>
        /// 邮箱
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// 手机号
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }

        /// <summary>
        /// 登录时间
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loginTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LoginTime { get; set; }

        /// <summary>
        /// 登录IP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ip { get; set; }

        /// <summary>
        /// 是否成功
        /// </summary>
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }

        /// <summary>
        /// 错误信息
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

        /// <summary>
        /// UA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userAgent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserAgent { get; set; }

        [Newtonsoft.Json.JsonProperty("platformName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PlatformName { get; set; }

        [Newtonsoft.Json.JsonProperty("loginModeName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoginModeName { get; set; }

    }

    /// <summary>
    /// 登录模式
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public enum LoginMode
    {

        Username = 0,

        Email = 1,

        Phone = 2,

        WeChat = 3,

        WeChatWork = 4,

        QQ = 5,

        DingDing = 6,

        FeiShu = 7,

        GitHub = 8,

        Custom = 9,

    }

    /// <summary>
    /// 包含指定类型主键的实体
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public abstract partial class EntityOfLong
    {
        /// <summary>
        /// 主键
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

    }

    /// <summary>
    /// 导出格式
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public enum ExportFormat
    {

        Xlsx = 0,

    }

    /// <summary>
    /// 导出模式
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public enum ExportMode
    {

        All = 0,

        CurrentPage = 1,

    }

    /// <summary>
    /// Excel导出列模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class ExcelExportColumnModel
    {
        /// <summary>
        /// 属性
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prop", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prop { get; set; }

        /// <summary>
        /// 说明
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// 对齐方式
        /// </summary>
        [Newtonsoft.Json.JsonProperty("align", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ColumnAlign Align { get; set; }

        /// <summary>
        /// 格式化，暂时仅支持日期类型
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Format { get; set; }

    }

    /// <summary>
    /// 列对齐方式
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public enum ColumnAlign
    {

        Left = 0,

        Center = 1,

        Right = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class LoginLogAddDto
    {
        /// <summary>
        /// 账户编号
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? AccountId { get; set; }

        /// <summary>
        /// 平台
        /// </summary>
        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Platform { get; set; }

        /// <summary>
        /// 登录方式
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loginMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoginMode LoginMode { get; set; }

        /// <summary>
        /// 用户名
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserName { get; set; }

        /// <summary>
        /// 邮箱
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// 手机号
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone { get; set; }

        /// <summary>
        /// 登录时间
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loginTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LoginTime { get; set; }

        /// <summary>
        /// 登录IP
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ip { get; set; }

        /// <summary>
        /// 是否成功
        /// </summary>
        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }

        /// <summary>
        /// 错误信息
        /// </summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

        /// <summary>
        /// UA
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userAgent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserAgent { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class LoginLogQueryDto : QueryDto
    {
        /// <summary>
        /// 账户编号
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? AccountId { get; set; }

        /// <summary>
        /// 登录平台
        /// </summary>
        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Platform { get; set; }

        /// <summary>
        /// 登录方式
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loginMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoginMode? LoginMode { get; set; }

        /// <summary>
        /// 开始日期
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? StartDate { get; set; }

        /// <summary>
        /// 开始日期
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EndDate { get; set; }

        /// <summary>
        /// 导出信息
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exportModel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExcelExportEntityModelOfLoginLogEntity ExportModel { get; set; }

        /// <summary>
        /// 导出数量
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exportCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ExportCount { get; set; }

        /// <summary>
        /// 导出数量限制
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exportCountLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ExportCountLimit { get; set; }

        /// <summary>
        /// 是否超出导出数量限制
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isOutOfExportCountLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsOutOfExportCountLimit { get; set; }

        /// <summary>
        /// 是否是导出操作
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isExport", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsExport { get; set; }

        /// <summary>
        /// 查询数量
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool QueryCount { get; set; }

    }

    /// <summary>
    /// 导出实体模型
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class ExcelExportEntityModelOfLoginLogEntity
    {
        /// <summary>
        /// 是否显示标题
        /// </summary>
        [Newtonsoft.Json.JsonProperty("showTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShowTitle { get; set; }

        /// <summary>
        /// 标题
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// 文件名
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        /// <summary>
        /// 导出格式
        /// </summary>
        [Newtonsoft.Json.JsonProperty("format", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExportFormat Format { get; set; }

        /// <summary>
        /// 导出模式
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExportMode Mode { get; set; }

        /// <summary>
        /// 是否显示版权信息
        /// </summary>
        [Newtonsoft.Json.JsonProperty("showCopyright", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShowCopyright { get; set; }

        /// <summary>
        /// 版权信息
        /// </summary>
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Copyright { get; set; }

        /// <summary>
        /// 是否显示列名称
        /// </summary>
        [Newtonsoft.Json.JsonProperty("showColumnName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShowColumnName { get; set; }

        /// <summary>
        /// 是否 显示导出日期
        /// </summary>
        [Newtonsoft.Json.JsonProperty("showExportDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShowExportDate { get; set; }

        /// <summary>
        /// 是否显示导出人
        /// </summary>
        [Newtonsoft.Json.JsonProperty("showExportPeople", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ShowExportPeople { get; set; }

        /// <summary>
        /// 导出的列信息
        /// </summary>
        [Newtonsoft.Json.JsonProperty("columns", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExcelExportColumnModel> Columns { get; set; }

    }

    /// <summary>
    /// 查询对象
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public abstract partial class QueryDto
    {
        /// <summary>
        /// 分页信息
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public QueryPagingDto Page { get; set; }

        /// <summary>
        /// 转换成Paging分页类
        /// </summary>
        [Newtonsoft.Json.JsonProperty("paging", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Paging Paging { get; set; }

    }

    /// <summary>
    /// 查询分页
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class QueryPagingDto
    {
        /// <summary>
        /// 当前页
        /// </summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Index { get; set; }

        /// <summary>
        /// 页大小
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        /// <summary>
        /// 排序字段
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sort", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<QuerySortDto> Sort { get; set; }

    }

    /// <summary>
    /// 分页类
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class Paging
    {
        /// <summary>
        /// 页码
        /// </summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Index { get; set; }

        /// <summary>
        /// 页大小
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        /// <summary>
        /// 页大小最大值，防止失误返回过大数据
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxSize", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxSize { get; set; }

        /// <summary>
        /// 跳过数量
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skip", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Skip { get; set; }

        /// <summary>
        /// 总数量
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long TotalCount { get; set; }

        /// <summary>
        /// 是否查询总数
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool QueryCount { get; set; }

        /// <summary>
        /// 总页数
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long TotalPage { get; set; }

        /// <summary>
        /// 排序
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sort> OrderBy { get; set; }

        [Newtonsoft.Json.JsonProperty("test", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Test Test { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class Test
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("CRB.TPM", "CRB.TPM.OpenAPIGenerator v1.0.0.0")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603